import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as r,c as n,b as e,e as i,d as t,a as c}from"./app-8cf4862e.js";const s={},p=c(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Git 是一个非常常用的代码版本控制程序，算是每个开发者必备的技能。本笔记前半部分罗列了一些 Git 的常用指令，后半部分介绍了 <a href="#git-%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5-%E5%9F%BA%E7%A1%80%E7%AF%87">Git 的相关概念</a>。</p></div><h2 id="git-常用指令" tabindex="-1"><a class="header-anchor" href="#git-常用指令" aria-hidden="true">#</a> Git 常用指令</h2><p>查看版本：<code>git log (--pretty=oneline)</code>  图形：<code>git log --graph --pretty=oneline --abbrev-commit</code></p><p>查看历史命令：<code>git reflog</code></p><p>回退到目标版本：<code>git reset --hard (版本号/HEAD^/HEAD~n)</code></p><p>将文件加入暂存区：<code>git add (文件名/.)</code></p><p>将暂存区的内容提交：<code>git commit -m &quot;说明&quot;</code></p><p>将工作区中的内容撤销到上一次add或commit命令的状态：<code>git checkout–(文件名)</code></p><p>将暂存区的内容撤销：<code>git reset HEAD (文件名)</code></p><p><code>git reset --patch (filename)</code></p><p>在工作区删除文件，并将删除操作加入暂存区：<code>git rm (文件名)</code></p><p>🌟 撤销commit，保留修改的代码：<code>git reset --soft HEAD^</code></p><ul><li>--mixed：不删除工作空间改动代码，撤销commit，撤销add</li><li>--soft：不删除工作空间改动代码，撤销commit，不撤销add</li><li>--hard：删除改动代码，撤销commit，撤销add</li></ul><hr><h3 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h3><ul><li>创建分支：<code>git branch (branch_name)</code></li><li>切换分支：<code>git checkout (branch_name)</code></li><li>创建并切换到分支：<code>git checkout -b (branch_name)</code></li><li>切换到远程分支：<code>git checkout -b (branch_name) origin/2.3-dev</code></li><li>查看当前所有分支：<code>git branch</code>，查看远程所有分支：<code>git branch -r</code></li><li>将指定分支合并到当前分支：<code>git merge (branch_name)</code></li><li>删除分支：<code>git branch -d (branch_name)</code> ，删除没有合并的分支要用-D</li><li>不使用FastForward模式进行分支的合并（在历史上能看出做过合并，ff模式看不出来做了合并）： <ul><li><code>git merge --no-ff -m &quot;说明&quot; (branch_name)</code></li></ul></li></ul><hr><h3 id="暂存" tabindex="-1"><a class="header-anchor" href="#暂存" aria-hidden="true">#</a> 暂存</h3><ul><li>把工作现场临时储存起来：<code>git stash</code></li><li>恢复工作现场：<code>git stash apply</code></li><li>将存档从stash中删除：<code>git stash drop</code></li><li>恢复工作现场并将存档从stash中删除：<code>git stash pop</code></li><li>列出所有stash内容：<code>git stash list</code></li></ul><hr><h3 id="远程服务器" tabindex="-1"><a class="header-anchor" href="#远程服务器" aria-hidden="true">#</a> 远程服务器</h3><ul><li>查看远程库的信息：<code>git remote (-v)</code></li><li>将master分支推送至服务器origin上的master：<code>git push origin master</code></li><li>将dev分支推送至服务器origin上的test：<code>git push origin dev:test</code></li></ul><hr><h3 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h3><ul><li>给指定commit创建标签：<code>git tag ()</code> 默认为HEAD</li><li>指定标签信息：<code>git tag -a -m &quot;balabala&quot;</code></li><li>使用PGP签名标签：<code>git tag -s -m &quot;balabala&quot;</code></li><li>查看所有标签：<code>git tag</code></li><li>删除标签： <code>git tag -d</code></li><li>将标签推送到服务器：<code>git push origin</code></li><li>将所有标签推送到服务器：<code>git push origin --tags</code></li><li>删除远程服务器上的一个标签：<code>git push origin :/refs/tags/</code></li></ul><hr><h3 id="初始化相关" tabindex="-1"><a class="header-anchor" href="#初始化相关" aria-hidden="true">#</a> 初始化相关</h3><ul><li>生成ssh密钥：<code>ssh-keygen -t rsa -C &quot;lztsmail@gmail.com&quot;</code></li><li>添加远程库：<code>git remote add origin git@github.com/xxx</code></li><li><code>git pull origin master --allow-unrelated-histories</code></li><li><code>git push -u origin master</code></li></ul><hr><h3 id="设置基本信息" tabindex="-1"><a class="header-anchor" href="#设置基本信息" aria-hidden="true">#</a> 设置基本信息</h3><ul><li><code>git config --global user.name &quot;你的名字或昵称&quot;</code></li><li><code>git config --global user.email &quot;你的邮箱&quot;</code></li></ul><hr><h3 id="配置别名" tabindex="-1"><a class="header-anchor" href="#配置别名" aria-hidden="true">#</a> 配置别名</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.lg <span class="token string">&quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="git-相关概念-基础篇" tabindex="-1"><a class="header-anchor" href="#git-相关概念-基础篇" aria-hidden="true">#</a> Git 相关概念：基础篇 <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></h2>`,35),g={class:"hint-container tip"},h=e("p",{class:"hint-container-title"},"提示",-1),l={href:"https://learngitbranching.js.org/?demo=&locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},m=c(`<h3 id="git-commit" tabindex="-1"><a class="header-anchor" href="#git-commit" aria-hidden="true">#</a> Git Commit</h3><p>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，<strong>就像是把整个目录复制</strong>，然后再粘贴一样，但比复制粘贴优雅许多！</p><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并<strong>不会盲目地复制整个目录</strong>。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并<strong>把所有的差异打包到一起作为一个提交记录</strong>。</p><p>Git <strong>还保存了提交的历史记录</strong>。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处。</p><p>关于提交记录太深入的东西咱们就不再继续探讨了，现在你可以把提交记录看作是项目的快照。提交记录非常轻量，可以快速地在这些提交记录之间切换！</p><h3 id="git-branch" tabindex="-1"><a class="header-anchor" href="#git-branch" aria-hidden="true">#</a> Git Branch</h3><p>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：</p><blockquote><p>早建分支！多用分支！</p></blockquote><p>这是因为即使创建再多的分支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。</p><p>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/FjFb0t.gif" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="git-merge" tabindex="-1"><a class="header-anchor" href="#git-merge" aria-hidden="true">#</a> Git Merge</h3><p>我们已经知道如何提交以及如何使用分支了。接下来咱们看看如何将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。</p><p>咱们先来看一下第一种方法 —— <code>git merge</code>。在 Git 中合并两个分支时会产生一个特殊的提交记录，<strong>它有两个父节点</strong>。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</p><p>右图为将main 与 bugFix 进行合并，main移动指针指向新的结果。之后可以 <code>git checkout bugFix; git merge main</code> 会将bugFix指针直接移动到 C4，因为 C4 继承于 C2，已经包含了 C2的所有信息。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/0c2tyq.png" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="git-rebase" tabindex="-1"><a class="header-anchor" href="#git-rebase" aria-hidden="true">#</a> Git Rebase</h3><p>第二种合并分支的方法是 <code>git rebase</code>。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。</p><p>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><p>还是准备了两个分支；注意当前所在的分支是 bugFix（星号标识的是当前分支）</p><p>我们想要把 bugFix 分支里的工作直接移到 main 分支上。移动以后会使得两个分支的功能看起来像是按顺序开发，但实际上它们是并行开发的。</p><p>咱们这次用 <code>git rebase</code> 实现此目标</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/Ot8Kis.gif" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>怎么样？！现在 bugFix 分支上的工作在 main 的最顶端，同时我们也得到了一个更线性的提交序列。</p><p>注意，提交记录 C3 依然存在（树上那个半透明的节点），而 C3&#39; 是我们 Rebase 到 main 分支上的 C3 的副本。</p><h2 id="git-相关概念-在提交树上移动" tabindex="-1"><a class="header-anchor" href="#git-相关概念-在提交树上移动" aria-hidden="true">#</a> Git 相关概念：在提交树上移动</h2><p>在接触 Git 更高级功能之前，我们有必要先学习在你项目的提交树上前后移动的几种方法。</p><h3 id="head" tabindex="-1"><a class="header-anchor" href="#head" aria-hidden="true">#</a> HEAD</h3><p>我们首先看一下 “HEAD”。 HEAD 是一个对当前检出记录的符号引用 —— 也就是<strong>指向你正在其基础上进行工作的提交记录</strong>。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果想看 HEAD 指向，可以通过 <code>cat .git/HEAD</code> 查看， 如果 HEAD 指向的是一个引用，还可以用 <code>git symbolic-ref HEAD</code> 查看它的指向。</p></div><h3 id="分离的-head" tabindex="-1"><a class="header-anchor" href="#分离的-head" aria-hidden="true">#</a> 分离的 HEAD</h3><p>分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。在命令执行之前的状态如下所示：</p><p>HEAD -&gt; main -&gt; C1</p><p>HEAD 指向 main， main 指向 C1</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/Vu5FYW.png" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="相对引用" tabindex="-1"><a class="header-anchor" href="#相对引用" aria-hidden="true">#</a> 相对引用</h3><p>通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 <code>git log</code> 来查查看提交记录的哈希值。</p><p>并且哈希值在真实的 Git 世界中也会更长（译者注：基于 SHA-1，共 40 位）。例如前一关的介绍中的提交记录的哈希值可能是 <code>fed2da64c0efc5293610bdd892f82a58e8cbc5d8</code>。舌头都快打结了吧...</p><p>比较令人欣慰的是，Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。因此我可以仅输入<code>fed2</code> 而不是上面的一长串字符。</p><p>正如我前面所说，通过哈希值指定提交记录很不方便，所以 Git 引入了相对引用。这个就很厉害了!</p><p>使用相对引用的话，你就可以从一个易于记忆的地方（比如 <code>bugFix</code> 分支或 <code>HEAD</code>）开始计算。</p><p>相对引用非常给力，这里我介绍两个简单的用法：</p><ul><li>使用 <code>^</code> 向上移动 1 个提交记录</li><li>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></li></ul><p>首先看看操作符 (^)。把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。</p><p>所以 <code>main^</code> 相当于“<code>main</code> 的父节点”。</p><p><code>main^^</code> 是 <code>main</code> 的第二个父节点</p><p>现在咱们切换到 main 的父节点</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/oHYiQr.png" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符" aria-hidden="true">#</a> “~”操作符</h3><p>如果你想在提交树中向上移动很多步的话，敲那么多 <code>^</code> 貌似也挺烦人的，Git 当然也考虑到了这一点，于是又引入了操作符 <code>~</code>。</p><p>该操作符后面可以跟一个数字（可选，不跟数字时与 <code>^</code> 相同，向上移动一次），指定向上移动多少次。咱们还是通过实际操作看一下吧</p><h3 id="强制修改分支位置" tabindex="-1"><a class="header-anchor" href="#强制修改分支位置" aria-hidden="true">#</a> 强制修改分支位置</h3><p>你现在是相对引用的专家了，现在用它来做点实际事情。</p><p>我使用相对引用最多的就是移动分支。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><p><code>git branch -f main HEAD~3</code></p><p>上面的命令会将 main 分支强制指向 HEAD 的第 3 级父提交。</p><p>这就对了! 相对引用为我们提供了一种简洁的引用提交记录 <code>C1</code> 的方式， 而 <code>-f</code> 则容许我们将分支强制移动到那个位置。</p><h2 id="git-相关概念-撤销变更" tabindex="-1"><a class="header-anchor" href="#git-相关概念-撤销变更" aria-hidden="true">#</a> Git 相关概念：撤销变更</h2><p>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</p><p>主要有两种方法用来撤销变更 —— 一是 <code>git reset</code>，还有就是 <code>git revert</code>。接下来咱们逐个进行讲解。</p><h3 id="git-reset" tabindex="-1"><a class="header-anchor" href="#git-reset" aria-hidden="true">#</a> Git Reset</h3><p><code>git reset</code> 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。<code>git reset</code> 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</p><p><code>git reset HEAD~1</code> ←右侧执行的指令</p><p>Git 把 main 分支移回到 <code>C1</code>；现在我们的本地代码库根本就不知道有 <code>C2</code> 这个提交了。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/FATkLc.png" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="git-revert" tabindex="-1"><a class="header-anchor" href="#git-revert" aria-hidden="true">#</a> Git Revert</h3><p>为了撤销更改并<strong>分享</strong>给别人，我们需要使用 <code>git revert</code>。</p><p><code>git revert HEAD</code> ← 右侧执行的指令</p><p>奇怪！在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录 <code>C2&#39;</code> 引入了<strong>更改</strong> —— 这些更改刚好是用来撤销 <code>C2</code> 这个提交的。也就是说 <code>C2&#39;</code> 的状态与 <code>C1</code> 是相同的。</p><p>revert 之后就可以把你的更改推送到远程仓库与别人分享啦。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/dMf2k4.png" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="git-相关概念-整理提交记录" tabindex="-1"><a class="header-anchor" href="#git-相关概念-整理提交记录" aria-hidden="true">#</a> Git 相关概念：整理提交记录</h2><p>到现在我们已经学习了 Git 的基础知识 —— 提交、分支以及在提交树上移动。 这些概念涵盖了 Git 90% 的功能，同样也足够满足开发者的日常需求</p><p>然而, 剩余的 10% 在处理复杂的工作流时(或者当你陷入困惑时）可能就显得尤为重要了。接下来要讨论的这个话题是“整理提交记录” —— 开发人员有时会说“我想要把这个提交放到这里, 那个提交放到刚才那个提交的后面”, 而接下来就讲的就是它的实现方式，非常清晰、灵活，还很生动。</p><p>看起来挺复杂, 其实是个很简单的概念。</p><h3 id="git-cherry-pick" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick" aria-hidden="true">#</a> Git Cherry-pick</h3><p>本系列的第一个命令是 <code>git cherry-pick</code>, 命令形式为:</p><ul><li><code>git cherry-pick &lt;提交号&gt;...</code></li></ul><p>如果你<strong>想将一些提交复制到当前所在的位置</strong>（<code>HEAD</code>）下面的话， Cherry-pick 是最直接的方式了。我个人非常喜欢 <code>cherry-pick</code>，因为它特别简单。</p><p>这里有一个仓库, 我们想将 <code>side</code> 分支上的工作复制到 <code>main</code> 分支，你立刻想到了之前学过的 <code>rebase</code> 了吧？但是咱们还是看看 <code>cherry-pick</code> 有什么本领吧。</p><p>这就是了！我们只需要提交记录 <code>C2</code> 和 <code>C4</code>，所以 Git 就将被它们抓过来放到当前分支下了。 就是这么简单!</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/UkaXXr.gif" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="交互式的-rebase" tabindex="-1"><a class="header-anchor" href="#交互式的-rebase" aria-hidden="true">#</a> 交互式的 rebase</h3><p>当你知道你所需要的提交记录（<strong>并且</strong>还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 —— 没有比这更简单的方式了。</p><p>但是如果你不清楚你想要的提交记录的哈希值呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互式的 rebase —— 如果你想从一系列的提交记录中找到想要的记录, 这就是最好的方法了</p><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。 考虑到课程的初衷，我弄了一个对话框来模拟这些操作。</p><p>当 rebase UI界面打开时, 你能做3件事:</p><ul><li>调整提交记录的顺序（通过鼠标拖放来完成）</li><li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。 遗憾的是由于某种逻辑的原因，我们的课程不支持此功能，因此我不会详细介绍这个操作。简而言之，它允许你把多个提交记录合并成一个。</li></ul><p>接下来咱们看个实例</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/y9HpbZ.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="git-相关概念-一些小技巧" tabindex="-1"><a class="header-anchor" href="#git-相关概念-一些小技巧" aria-hidden="true">#</a> Git 相关概念：一些小技巧</h2><h3 id="本地栈式提交" tabindex="-1"><a class="header-anchor" href="#本地栈式提交" aria-hidden="true">#</a> 本地栈式提交</h3><p>来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。</p><p>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！</p><p>最后就差把 <code>bugFix</code> 分支里的工作合并回 <code>main</code> 分支了。你可以选择通过 fast-forward 快速合并到 <code>main</code> 分支上，但这样的话 <code>main</code> 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式……</p><p>实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用</p><ul><li><code>git rebase -i</code></li><li><code>git cherry-pick</code></li></ul><p>来达到目的。</p><p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/d4WhjT.png" alt="" height="300" loading="lazy">  <br><img src="http://timpcfan-site.cdn.bcebos.com/imgs/uOu6XQ.png" alt="" height="300" loading="lazy"></p><h3 id="提交的技巧-1" tabindex="-1"><a class="header-anchor" href="#提交的技巧-1" aria-hidden="true">#</a> 提交的技巧 #1</h3><p>接下来这种情况也是很常见的：你之前在 <code>newImage</code> 分支上进行了一次提交，然后又基于它创建了 <code>caption</code> 分支，然后又提交了一次。</p><p>此时你想对某个以前的提交记录进行一些小小的调整。比如设计师想修改一下 <code>newImage</code> 中图片的分辨率，尽管那个提交记录并不是最新的了。</p><p>我们可以通过下面的方法来克服困难：</p><ul><li>先用 <code>git rebase -i</code> 将提交重新排序，然后把我们想要修改的提交记录挪到最前</li><li>然后用 <code>git commit --amend</code> 来进行一些小修改</li><li>接着再用 <code>git rebase -i</code> 来将他们调回原来的顺序</li><li>最后我们把 main 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！</li></ul><p>当然完成这个任务的方法不止上面提到的一种（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。 最后有必要说明一下目标状态中的那几个<code>&#39;</code> —— 我们把这个提交移动了两次，每移动一次会产生一个 <code>&#39;</code>；而 C2 上多出来的那个是我们在使用了 amend 参数提交时产生的，所以最终结果就是这样了。</p><p>也就是说，我在对比结果的时候只会对比提交树的结构，对于 <code>&#39;</code> 的数量上的不同，并不纳入对比范围内。只要你的 <code>main</code> 分支结构与目标结构相同，我就算你通过。</p><h3 id="提交的技巧-2" tabindex="-1"><a class="header-anchor" href="#提交的技巧-2" aria-hidden="true">#</a> 提交的技巧 #2</h3><p><em>如果你还没有完成“提交的技巧 #1”（前一关）的话，请先通过以后再来！</em></p><p>正如你在上一关所见到的，我们可以使用 <code>rebase -i</code> 对提交记录进行重新排序。只要把我们想要的提交记录挪到最前端，我们就可以很轻松的用 <code>--amend</code> 修改它，然后把它们重新排成我们想要的顺序。</p><p>但这样做就唯一的问题就是要进行两次排序，而这有可能造成由 rebase 而导致的冲突。下面还是看看 <code>git cherry-pick</code> 是怎么做的吧。</p><h3 id="git-tags" tabindex="-1"><a class="header-anchor" href="#git-tags" aria-hidden="true">#</a> Git Tags</h3><p>相信通过前面课程的学习你已经发现了：分支很容易被人为移动，并且当有新的提交时，它也会移动。分支很容易被改变，大部分分支还只是临时的，并且还一直在变。</p><p>你可能会问了：有没有什么可以<em>永远</em>指向某个提交记录的标识呢，比如软件发布新的大版本，或者是修正一些重要的 Bug 或是增加了某些新特性，有没有比分支更好的可以永远指向这些提交的方法呢？</p><p>当然有了！Git 的 tag 就是干这个用的啊，它们可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。</p><p>更难得的是，它们并不会随着新的提交而移动。你也不能切换到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。</p><p>咱们来看看标签到底是什么样。</p><p>咱们先建立一个标签，指向提交记录 <code>C1</code>，表示这是我们 1.0 版本。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>git tag v1 C1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很容易吧！我们将这个标签命名为 <code>v1</code>，并且明确地让它指向提交记录 <code>C1</code>，如果你不指定提交记录，Git 会用 <code>HEAD</code> 所指向的位置。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/B84z6y.png" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="git-describe" tabindex="-1"><a class="header-anchor" href="#git-describe" aria-hidden="true">#</a> Git Describe</h3><p>由于标签在代码库中起着“锚点”的作用，Git 还为此专门设计了一个命令用来<strong>描述</strong>离你最近的锚点（也就是标签），它就是 <code>git describe</code>！</p><p>Git Describe 能帮你在提交历史中移动了多次以后找到方向；当你用 <code>git bisect</code>（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。</p><p><code>git describe</code> 的语法是：</p><p><code>git describe &lt;ref&gt;</code></p><p><code>&lt;ref&gt;</code> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（<code>HEAD</code>）。</p><p>它输出的结果是这样的：</p><p><code>&lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash&gt;</code></p><p><code>tag</code> 表示的是离 <code>ref</code> 最近的标签， <code>numCommits</code> 是表示这个 <code>ref</code> 与 <code>tag</code> 相差有多少个提交记录， <code>hash</code> 表示的是你所给定的 <code>ref</code> 所表示的提交记录哈希值的前几位。</p><p>当 <code>ref</code> 提交记录上有某个标签时，则只输出标签名称</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/nlsthb.png" alt="" height="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="多分支-rebase" tabindex="-1"><a class="header-anchor" href="#多分支-rebase" aria-hidden="true">#</a> 多分支 rebase</h3><p>哥们儿，我们准备了很多分支！咱们把这些分支 rebase 到 main 上吧。</p><p>但是你的领导给你提了点要求 —— 他们希望得到有序的提交历史，也就是我们最终的结果应该是 <code>C6&#39;</code> 在 <code>C7&#39;</code> 上面， <code>C5&#39;</code> 在 <code>C6&#39;</code> 上面，依此类推。</p><p>即使你搞砸了也没关系，用 <code>reset</code> 命令就可以重新开始了。记得看看我们提供的答案，看你能否使用更少的命令来完成任务！</p><h3 id="选择父提交记录" tabindex="-1"><a class="header-anchor" href="#选择父提交记录" aria-hidden="true">#</a> 选择父提交记录</h3><p>操作符 <code>^</code> 与 <code>~</code> 符一样，后面也可以跟一个数字。</p><p>但是该操作符后面的数字与 <code>~</code> 后面的不同，并不是用来指定向上返回几代，而是指定合并提交记录的某个父提交。还记得前面提到过的一个合并提交有两个父提交吧，所以遇到这样的节点时该选择哪条路径就不是很清晰了。</p><p>Git 默认选择合并提交的“第一个”父提交，在操作符 <code>^</code> 后跟一个数字可以改变这一默认行为。</p><p>废话不多说，举个例子。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/GzTuD6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/5UVgNg.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr class="footnotes-sep">`,147),b={class:"footnotes"},f={class:"footnotes-list"},u={id:"footnote1",class:"footnote-item"},x={href:"https://learngitbranching.js.org/?demo=&locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},G=e("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function _(C,y){const a=d("ExternalLinkIcon");return r(),n("div",null,[p,e("div",g,[h,e("p",null,[i("强烈建议使用该线上教程 "),e("a",l,[i("Learn Git Branching"),t(a)]),i(" 了解 git 的各种概念，本文后半部分为该线上教程的文字版本，供读者参考。")])]),m,e("section",b,[e("ol",f,[e("li",u,[e("p",null,[e("a",x,[i("Learn Git Branching"),t(a)]),i(),G])])])])])}const k=o(s,[["render",_],["__file","git.html.vue"]]);export{k as default};
