import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as a,c as l,a as e,b as o,e as d,d as i}from"./app-8cc94dc5.js";const s={},r={class:"hint-container info"},p=e("p",{class:"hint-container-title"},"相关信息",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block",target:"_blank",rel:"noopener noreferrer"},_=i('<p>一个元素的尺寸和位置经常受其<strong>包含块</strong> (containing block)的影响。大多数情况下，包含块就是这个元素最近的祖先块元素的内容区，但也不是总是这样。在本文中，我们来过一遍确定包含块的所有因素。</p><p>当一个客户端代理（比如说浏览器）展示一个文档的时候，对于每一个元素，它都产生了一个盒子。每一个盒子都被划分为四个区域：</p><ul><li>内容区</li><li>内边距区</li><li>边框区</li><li>外边距区</li></ul><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/vFXIfB.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>一个元素的包含块<mark>不一定是他的父元素的内容区</mark>。</p></div><h2 id="包含块的影响" tabindex="-1"><a class="header-anchor" href="#包含块的影响" aria-hidden="true">#</a> 包含块的影响</h2><p>元素的尺寸及位置，常常会受它的包含块所影响。对于一些属性，例如 <code>width</code>, <code>height</code>, <code>padding</code>, <code>margin</code>，绝对定位元素的偏移值（比如 <code>position</code> 被设置为 <code>absolute</code> 或 <code>fixed</code>），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。</p><h2 id="确定元素包含块的因素都有哪些" tabindex="-1"><a class="header-anchor" href="#确定元素包含块的因素都有哪些" aria-hidden="true">#</a> 确定元素包含块的因素都有哪些</h2><p>确定一个元素的包含块的过程完全依赖于这个元素的 <code>position</code> 属性：</p><ol><li>如果 <code>position</code> 属性为 <code>static</code>、<code>relative</code> 或 <code>sticky</code>，包含块可能由它的最近的祖先块元素（比如说 <code>inline-block</code>, <code>block</code> 或 <code>list-item</code> 元素）的内容区的边缘组成，也可能会建立格式化上下文 (比如说 a table container, flex container, grid container, 或者是 the block container 自身)。</li><li>如果 <code>position</code> 属性为 <code>absolute</code> ，包含块就是由它的最近的 <code>position</code> 的值不是 <code>static</code> （也就是值为<code>fixed</code>, <code>absolute</code>, <code>relative</code> 或 <code>sticky</code>）的祖先元素的内边距区的边缘组成。</li><li>如果 <code>position</code> 属性是 <code>fixed</code>，在连续媒体的情况下 (continuous media) 包含块是 viewport ,在分页媒体 (paged media) 下的情况下包含块是分页区域 (page area)。</li><li>如果 <code>position</code> 属性是 <code>absolute</code> 或 <code>fixed</code>，包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的： <ul><li><code>transform</code> 或 <code>perspective</code> 的值不是 <code>none</code></li><li><code>will-change</code> 的值是 <code>transform</code> 或 <code>perspective</code></li><li><code>filter</code> 的值不是 <code>none</code> 或 <code>will-change</code> 的值是 <code>filter</code>(只在 Firefox 下生效).</li><li><code>contain</code> 的值是 <code>paint</code> (例如：<code>contain: paint;</code>) （🌟 这个很好用）</li></ul></li></ol>',10),f={class:"hint-container details"},g=e("summary",null,"contain 属性",-1),m={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain",target:"_blank",rel:"noopener noreferrer"},u=e("strong",null,"contain",-1),b=e("em",null,"独立于",-1),v=e("p",null,"这个属性在包含大量独立组件的页面非常实用，它可以防止某个小部件的 CSS 规则改变对页面上的其他东西造成影响。",-1),k=i('<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>根元素 (<code>&lt;html&gt;</code>) 所在的包含块是一个被称为初始包含块的矩形。他的尺寸是视口 viewport (for continuous media) 或分页媒体 page media (for paged media).</p></div><h2 id="根据包含块计算百分值" tabindex="-1"><a class="header-anchor" href="#根据包含块计算百分值" aria-hidden="true">#</a> 根据包含块计算百分值</h2><p>如上所述，如果某些属性被赋予一个百分值的话，它的计算值是由这个元素的包含块计算而来的。这些属性包括盒模型属性和偏移属性：</p><ol><li>要计算 <code>height</code>, <code>top</code> 及 <code>bottom</code> 中的百分值，是通过包含块的 <code>height</code> 的值。如果包含块的 <code>height</code> 值会根据它的内容变化，而且包含块的 <code>position</code> 属性的值被赋予 <code>relative</code> 或 <code>static</code> ，那么，这些值的计算值为 <code>auto</code>。</li><li>要计算 <code>width</code>, <code>left</code>, <code>right</code>, <code>padding</code>, <code>margin</code> 这些属性由包含块的 <code>width</code> 属性的值来计算它的百分值。</li></ol>',4);function x(S,C){const c=n("ExternalLinkIcon");return a(),l("div",null,[e("div",r,[p,e("p",null,[o("原文链接："),e("a",h,[o("布局和包含块 | MDN"),d(c)])])]),_,e("details",f,[g,e("p",null,[e("a",m,[o("CSS "),u,o(" 属性"),d(c)]),o("允许开发者声明当前元素和它的内容尽可能的"),b,o(" DOM 树的其他部分。这使得浏览器在重新计算布局、样式、绘图、大小或这四项的组合时，只影响到有限的 DOM 区域，而不是整个页面，可以有效改善性能。")]),v]),k])}const z=t(s,[["render",x],["__file","css_containing_block.html.vue"]]);export{z as default};
