import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as p,a as n,b as s,e,w as c,d as t}from"./app-8cc94dc5.js";const u={},d={href:"https://github.com/donnemartin/system-design-primer",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/xitu/gold-miner",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/XatMassacrE",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/L9m",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/Airmacho",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/xiaoyusilen",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/jifaxu",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/sqrthree",target:"_blank",rel:"noopener noreferrer"},v={id:"设计-mint-com",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#设计-mint-com","aria-hidden":"true"},"#",-1),A={href:"http://Mint.com",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"},B=t('<h2 id="第一步-简述用例与约束条件" tabindex="-1"><a class="header-anchor" href="#第一步-简述用例与约束条件" aria-hidden="true">#</a> 第一步：简述用例与约束条件</h2><blockquote><p>搜集需求与问题的范围。<br> 提出问题来明确用例与约束条件。<br> 讨论假设。</p></blockquote><p>我们将在没有面试官明确说明问题的情况下，自己定义一些用例以及限制条件。</p><h3 id="用例" tabindex="-1"><a class="header-anchor" href="#用例" aria-hidden="true">#</a> 用例</h3><h4 id="我们将把问题限定在仅处理以下用例的范围中" tabindex="-1"><a class="header-anchor" href="#我们将把问题限定在仅处理以下用例的范围中" aria-hidden="true">#</a> 我们将把问题限定在仅处理以下用例的范围中</h4><ul><li><strong>用户</strong> 连接到一个财务账户</li><li><strong>服务</strong> 从账户中提取交易 <ul><li>每日更新</li><li>分类交易 <ul><li>允许用户手动分类</li><li>不自动重新分类</li></ul></li><li>按类别分析每月支出</li></ul></li><li><strong>服务</strong> 推荐预算 <ul><li>允许用户手动设置预算</li><li>当接近或者超出预算时，发送通知</li></ul></li><li><strong>服务</strong> 具有高可用性</li></ul><h4 id="非用例范围" tabindex="-1"><a class="header-anchor" href="#非用例范围" aria-hidden="true">#</a> 非用例范围</h4><ul><li><strong>服务</strong> 执行附加的日志记录和分析</li></ul><h3 id="限制条件与假设" tabindex="-1"><a class="header-anchor" href="#限制条件与假设" aria-hidden="true">#</a> 限制条件与假设</h3><h4 id="提出假设" tabindex="-1"><a class="header-anchor" href="#提出假设" aria-hidden="true">#</a> 提出假设</h4><ul><li>网络流量非均匀分布</li><li>自动账户日更新只适用于 30 天内活跃的用户</li><li>添加或者移除财务账户相对较少</li><li>预算通知不需要及时</li><li>1000 万用户 <ul><li>每个用户 10 个预算类别= 1 亿个预算项</li><li>示例类别: <ul><li>Housing = $1,000</li><li>Food = $200</li><li>Gas = $100</li></ul></li><li>卖方确定交易类别 <ul><li>50000 个卖方</li></ul></li></ul></li><li>3000 万财务账户</li><li>每月 50 亿交易</li><li>每月 5 亿读请求</li><li>10:1 读写比 <ul><li>Write-heavy，用户每天都进行交易，但是每天很少访问该网站</li></ul></li></ul><h4 id="计算用量" tabindex="-1"><a class="header-anchor" href="#计算用量" aria-hidden="true">#</a> 计算用量</h4><p><strong>如果你需要进行粗略的用量计算，请向你的面试官说明。</strong></p><ul><li>每次交易的用量: <ul><li><code>user_id</code> - 8 字节</li><li><code>created_at</code> - 5 字节</li><li><code>seller</code> - 32 字节</li><li><code>amount</code> - 5 字节</li><li>Total: ~50 字节</li></ul></li><li>每月产生 250 GB 新的交易内容 <ul><li>每次交易 50 比特 * 50 亿交易每月</li><li>3 年内新的交易内容 9 TB</li><li>Assume most are new transactions instead of updates to existing ones</li></ul></li><li>平均每秒产生 2000 次交易</li><li>平均每秒产生 200 读请求</li></ul><p>便利换算指南：</p><ul><li>每个月有 250 万秒</li><li>每秒一个请求 = 每个月 250 万次请求</li><li>每秒 40 个请求 = 每个月 1 亿次请求</li><li>每秒 400 个请求 = 每个月 10 亿次请求</li></ul><h2 id="第二步-概要设计" tabindex="-1"><a class="header-anchor" href="#第二步-概要设计" aria-hidden="true">#</a> 第二步：概要设计</h2><blockquote><p>列出所有重要组件以规划概要设计。</p></blockquote><figure><img src="http://i.imgur.com/E8klrBh.png" alt="Imgur" tabindex="0" loading="lazy"><figcaption>Imgur</figcaption></figure><h2 id="第三步-设计核心组件" tabindex="-1"><a class="header-anchor" href="#第三步-设计核心组件" aria-hidden="true">#</a> 第三步：设计核心组件</h2><blockquote><p>深入每个核心组件的细节。</p></blockquote><h3 id="用例-用户连接到一个财务账户" tabindex="-1"><a class="header-anchor" href="#用例-用户连接到一个财务账户" aria-hidden="true">#</a> 用例：用户连接到一个财务账户</h3>',22),D={href:"https://github.com/donnemartin/system-design-primer#relational-database-management-system-rdbms",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/donnemartin/system-design-primer#sql-or-nosql",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"客户端",-1),x={href:"https://github.com/donnemartin/system-design-primer#reverse-proxy-web-server",target:"_blank",rel:"noopener noreferrer"},N=n("strong",null,"Web 服务器",-1),M=n("li",null,[n("strong",null,"Web 服务器"),s(" 转发请求到 "),n("strong",null,"账户 API"),s(" 服务器")],-1),L=n("li",null,[n("strong",null,"账户 API"),s(" 服务器将新输入的账户信息更新到 "),n("strong",null,"SQL 数据库"),s(" 的"),n("code",null,"accounts"),s("表")],-1),z=t(`<p><strong>告知你的面试官你准备写多少代码</strong>。</p><p><code>accounts</code>表应该具有如下结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>id int NOT NULL AUTO_INCREMENT
created_at datetime NOT NULL
last_update datetime NOT NULL
account_url varchar(255) NOT NULL
account_login varchar(32) NOT NULL
account_password_hash char(64) NOT NULL
user_id int NOT NULL
PRIMARY KEY(id)
FOREIGN KEY(user_id) REFERENCES users(id)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),C=n("code",null,"id",-1),H=n("code",null,"user_id",-1),w=n("code",null,"created_at",-1),F={href:"https://github.com/donnemartin/system-design-primer#use-good-indices",target:"_blank",rel:"noopener noreferrer"},S=n("sup",null,[n("a",{href:"https://github.com/donnemartin/system-design-primer#latency-numbers-every-programmer-should-know"},"1")],-1),O={href:"https://github.com/donnemartin/system-design-primer#representational-state-transfer-rest",target:"_blank",rel:"noopener noreferrer"},T=n("strong",null,"REST API",-1),I=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ curl -X POST --data &#39;{ &quot;user_id&quot;: &quot;foo&quot;, &quot;account_url&quot;: &quot;bar&quot;, \\
    &quot;account_login&quot;: &quot;baz&quot;, &quot;account_password&quot;: &quot;qux&quot; }&#39; \\
    https://mint.com/api/v1/account
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),U={href:"https://github.com/donnemartin/system-design-primer#remote-procedure-call-rpc",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,"接下来，服务从账户中提取交易。",-1),Q=n("h3",{id:"用例-服务从账户中提取交易",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#用例-服务从账户中提取交易","aria-hidden":"true"},"#"),s(" 用例：服务从账户中提取交易")],-1),G=n("p",null,"如下几种情况下，我们会想要从账户中提取信息：",-1),W=n("ul",null,[n("li",null,"用户首次链接账户"),n("li",null,"用户手动更新账户"),n("li",null,"为过去 30 天内活跃的用户自动日更新")],-1),Y=n("p",null,"数据流:",-1),j=n("li",null,[n("strong",null,"客户端"),s("向 "),n("strong",null,"Web 服务器"),s(" 发送请求")],-1),K=n("li",null,[n("strong",null,"Web 服务器"),s(" 将请求转发到 "),n("strong",null,"帐户 API"),s(" 服务器")],-1),V=n("strong",null,"帐户 API",-1),$=n("strong",null,"队列",-1),X={href:"https://aws.amazon.com/sqs/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/donnemartin/system-design-primer#asynchronism",target:"_blank",rel:"noopener noreferrer"},nn=t("<li><strong>交易提取服务</strong> 执行如下操作： <ul><li>从 <strong>Queue</strong> 中拉取并从金融机构中提取给定用户的交易，将结果作为原始日志文件存储在 <strong>对象存储区</strong>。</li><li>使用 <strong>分类服务</strong> 来分类每个交易</li><li>使用 <strong>预算服务</strong> 来按类别计算每月总支出 <ul><li><strong>预算服务</strong> 使用 <strong>通知服务</strong> 让用户知道他们是否接近或者已经超出预算</li></ul></li><li>更新具有分类交易的 <strong>SQL 数据库</strong> 的<code>transactions</code>表</li><li>按类别更新 <strong>SQL 数据库</strong> <code>monthly_spending</code>表的每月总支出</li><li>通过 <strong>通知服务</strong> 提醒用户交易完成 <ul><li>使用一个 <strong>队列</strong> (没有画出来) 来异步发送通知</li></ul></li></ul></li>",1),sn=t(`<p><code>transactions</code>表应该具有如下结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>id int NOT NULL AUTO_INCREMENT
created_at datetime NOT NULL
seller varchar(32) NOT NULL
amount decimal NOT NULL
user_id int NOT NULL
PRIMARY KEY(id)
FOREIGN KEY(user_id) REFERENCES users(id)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),en=n("code",null,"id",-1),an=n("code",null,"user_id",-1),tn=n("code",null,"created_at",-1),on={href:"https://github.com/donnemartin/system-design-primer#use-good-indices",target:"_blank",rel:"noopener noreferrer"},rn=t(`<p><code>monthly_spending</code>表应该具有如下结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>id int NOT NULL AUTO_INCREMENT
month_year date NOT NULL
category varchar(32)
amount decimal NOT NULL
user_id int NOT NULL
PRIMARY KEY(id)
FOREIGN KEY(user_id) REFERENCES users(id)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ln=n("code",null,"id",-1),pn=n("code",null,"user_id",-1),cn={href:"https://github.com/donnemartin/system-design-primer#use-good-indices",target:"_blank",rel:"noopener noreferrer"},un=t(`<h4 id="分类服务" tabindex="-1"><a class="header-anchor" href="#分类服务" aria-hidden="true">#</a> 分类服务</h4><p>对于 <strong>分类服务</strong>，我们可以生成一个带有最受欢迎卖家的卖家-类别字典。如果我们估计 50000 个卖家，并估计每个条目占用不少于 255 个字节，该字典只需要大约 12 MB 内存。</p><p><strong>告知你的面试官你准备写多少代码</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DefaultCategories</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>

    HOUSING <span class="token operator">=</span> <span class="token number">0</span>
    FOOD <span class="token operator">=</span> <span class="token number">1</span>
    GAS <span class="token operator">=</span> <span class="token number">2</span>
    SHOPPING <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

seller_category_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
seller_category_map<span class="token punctuation">[</span><span class="token string">&#39;Exxon&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> DefaultCategories<span class="token punctuation">.</span>GAS
seller_category_map<span class="token punctuation">[</span><span class="token string">&#39;Target&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> DefaultCategories<span class="token punctuation">.</span>SHOPPING
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于一开始没有在映射中的卖家，我们可以通过评估用户提供的手动类别来进行众包。在 O(1) 时间内，我们可以用堆来快速查找每个卖家的顶端的手动覆盖。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Categorizer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> seller_category_map<span class="token punctuation">,</span> self<span class="token punctuation">.</span>seller_category_crowd_overrides_map<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>seller_category_map <span class="token operator">=</span> seller_category_map
        self<span class="token punctuation">.</span>seller_category_crowd_overrides_map <span class="token operator">=</span> \\
            seller_category_crowd_overrides_map

    <span class="token keyword">def</span> <span class="token function">categorize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> transaction<span class="token punctuation">.</span>seller <span class="token keyword">in</span> self<span class="token punctuation">.</span>seller_category_map<span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>seller_category_map<span class="token punctuation">[</span>transaction<span class="token punctuation">.</span>seller<span class="token punctuation">]</span>
        <span class="token keyword">elif</span> transaction<span class="token punctuation">.</span>seller <span class="token keyword">in</span> self<span class="token punctuation">.</span>seller_category_crowd_overrides_map<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>seller_category_map<span class="token punctuation">[</span>transaction<span class="token punctuation">.</span>seller<span class="token punctuation">]</span> <span class="token operator">=</span> \\
                self<span class="token punctuation">.</span>seller_category_crowd_overrides_map<span class="token punctuation">[</span>transaction<span class="token punctuation">.</span>seller<span class="token punctuation">]</span><span class="token punctuation">.</span>peek_min<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>seller_category_map<span class="token punctuation">[</span>transaction<span class="token punctuation">.</span>seller<span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>交易实现：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> created_at<span class="token punctuation">,</span> seller<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>timestamp <span class="token operator">=</span> timestamp
        self<span class="token punctuation">.</span>seller <span class="token operator">=</span> seller
        self<span class="token punctuation">.</span>amount <span class="token operator">=</span> amount
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用例-服务推荐预算" tabindex="-1"><a class="header-anchor" href="#用例-服务推荐预算" aria-hidden="true">#</a> 用例：服务推荐预算</h3><p>首先，我们可以使用根据收入等级分配每类别金额的通用预算模板。使用这种方法，我们不必存储在约束中标识的 1 亿个预算项目，只需存储用户覆盖的预算项目。如果用户覆盖预算类别，我们可以在<br><code>TABLE budget_overrides</code>中存储此覆盖。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Budget</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> income<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>income <span class="token operator">=</span> income
        self<span class="token punctuation">.</span>categories_to_budget_map <span class="token operator">=</span> self<span class="token punctuation">.</span>create_budget_template<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">create_budget_template</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;DefaultCategories.HOUSING&#39;</span><span class="token punctuation">:</span> income <span class="token operator">*</span> <span class="token number">.4</span><span class="token punctuation">,</span>
            <span class="token string">&#39;DefaultCategories.FOOD&#39;</span><span class="token punctuation">:</span> income <span class="token operator">*</span> <span class="token number">.2</span>
            <span class="token string">&#39;DefaultCategories.GAS&#39;</span><span class="token punctuation">:</span> income <span class="token operator">*</span> <span class="token number">.1</span><span class="token punctuation">,</span>
            <span class="token string">&#39;DefaultCategories.SHOPPING&#39;</span><span class="token punctuation">:</span> income <span class="token operator">*</span> <span class="token number">.2</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">override_category_budget</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> category<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>categories_to_budget_map<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">=</span> amount
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <strong>预算服务</strong> 而言，我们可以在<code>transactions</code>表上运行 SQL 查询以生成<code>monthly_spending</code>聚合表。由于用户通常每个月有很多交易，所以<code>monthly_spending</code>表的行数可能会少于总共 50 亿次交易的行数。</p><p>作为替代，我们可以在原始交易文件上运行 <strong>MapReduce</strong> 作业来：</p><ul><li>分类每个交易</li><li>按类别生成每月总支出</li></ul><p>对交易文件的运行分析可以显著减少数据库的负载。</p><p>如果用户更新类别，我们可以调用 <strong>预算服务</strong> 重新运行分析。</p><p><strong>告知你的面试官你准备写多少代码</strong>.</p><p>日志文件格式样例，以 tab 分割：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>user_id   timestamp   seller  amount
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>MapReduce</strong> 实现:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SpendingByCategory</span><span class="token punctuation">(</span>MRJob<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> categorizer<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>categorizer <span class="token operator">=</span> categorizer
        self<span class="token punctuation">.</span>current_year_month <span class="token operator">=</span> calc_current_year_month<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">calc_current_year_month</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;返回当前年月&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">extract_year_month</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;返回时间戳的年，月部分&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">handle_budget_notifications</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;如果接近或超出预算，调用通知API&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">mapper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> _<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;解析每个日志行，提取和转换相关行。

        参数行应为如下形式：

        user_id   timestamp   seller  amount

        使用分类器来将卖家转换成类别，生成如下形式的key-value对：

        (user_id, 2016-01, shopping), 25
        (user_id, 2016-01, shopping), 100
        (user_id, 2016-01, gas), 50
        &quot;&quot;&quot;</span>
        user_id<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> seller<span class="token punctuation">,</span> amount <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
        category <span class="token operator">=</span> self<span class="token punctuation">.</span>categorizer<span class="token punctuation">.</span>categorize<span class="token punctuation">(</span>seller<span class="token punctuation">)</span>
        period <span class="token operator">=</span> self<span class="token punctuation">.</span>extract_year_month<span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span>
        <span class="token keyword">if</span> period <span class="token operator">==</span> self<span class="token punctuation">.</span>current_year_month<span class="token punctuation">:</span>
            <span class="token keyword">yield</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> period<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">,</span> amount

    <span class="token keyword">def</span> <span class="token function">reducer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;将每个key对应的值求和。

        (user_id, 2016-01, shopping), 125
        (user_id, 2016-01, gas), 50
        &quot;&quot;&quot;</span>
        total <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
        <span class="token keyword">yield</span> key<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第四步-设计扩展" tabindex="-1"><a class="header-anchor" href="#第四步-设计扩展" aria-hidden="true">#</a> 第四步：设计扩展</h2><blockquote><p>根据限制条件，找到并解决瓶颈。</p></blockquote><figure><img src="http://i.imgur.com/V5q57vU.png" alt="Imgur" tabindex="0" loading="lazy"><figcaption>Imgur</figcaption></figure><p><strong>重要提示：不要从最初设计直接跳到最终设计中！</strong></p>`,25),dn=n("strong",null,"基准测试、负载测试",-1),mn=n("strong",null,"分析、描述",-1),hn=n("p",null,[s("讨论初始设计可能遇到的瓶颈及相关解决方案是很重要的。例如加上一个配置多台 "),n("strong",null,"Web 服务器"),s("的"),n("strong",null,"负载均衡器"),s("是否能够解决问题？"),n("strong",null,"CDN"),s("呢？"),n("strong",null,"主从复制"),s("呢？它们各自的替代方案和需要"),n("strong",null,"权衡"),s("的利弊又有什么呢？")],-1),gn=n("p",null,"我们将会介绍一些组件来完成设计，并解决架构扩张问题。内置的负载均衡器将不做讨论以节省篇幅。",-1),bn=n("strong",null,"为了避免重复讨论",-1),_n={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},An={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E5%B1%82",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Frdbms",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%85%E9%9A%9C%E5%88%87%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BC%82%E6%AD%A5",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%AF%E7%94%A8%E6%80%A7%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},Mn=t("<p>我们将增加一个额外的用例：<strong>用户</strong> 访问摘要和交易数据。</p><p>用户会话，按类别统计的统计信息，以及最近的事务可以放在 <strong>内存缓存</strong>（如 Redis 或 Memcached ）中。</p><ul><li><strong>客户端</strong> 发送读请求给 <strong>Web 服务器</strong></li><li><strong>Web 服务器</strong> 转发请求到 <strong>读 API</strong> 服务器 <ul><li>静态内容可通过 <strong>对象存储</strong> 比如缓存在 <strong>CDN</strong> 上的 S3 来服务</li></ul></li><li><strong>读 API</strong> 服务器做如下动作: <ul><li>检查 <strong>内存缓存</strong> 的内容 <ul><li>如果 URL 在 <strong>内存缓存</strong>中，返回缓存的内容</li><li>否则 <ul><li>如果 URL 在 <strong>SQL 数据库</strong>中，获取该内容 <ul><li>以其内容更新 <strong>内存缓存</strong></li></ul></li></ul></li></ul></li></ul></li></ul>",3),Ln={href:"https://github.com/donnemartin/system-design-primer#when-to-update-the-cache",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://github.com/donnemartin/system-design-primer#cache-aside",target:"_blank",rel:"noopener noreferrer"},Cn=t("<p>我们可以使用诸如 Amazon Redshift 或者 Google BigQuery 等数据仓库解决方案，而不是将<code>monthly_spending</code>聚合表保留在 <strong>SQL 数据库</strong> 中。</p><p>我们可能只想在数据库中存储一个月的<code>交易</code>数据，而将其余数据存储在数据仓库或者 <strong>对象存储区</strong> 中。<strong>对象存储区</strong> （如 Amazon S3) 能够舒服地解决每月 250 GB 新内容的限制。</p><p>为了解决每秒 <em>平均</em> 2000 次读请求数（峰值时更高），受欢迎的内容的流量应由 <strong>内存缓存</strong> 而不是数据库来处理。 <strong>内存缓存</strong> 也可用于处理不均匀分布的流量和流量尖峰。 只要副本不陷入重复写入的困境，<strong>SQL 读副本</strong> 应该能够处理高速缓存未命中。</p><p><em>平均</em> 200 次交易写入每秒（峰值时更高）对于单个 <strong>SQL 写入主-从服务</strong> 来说可能是棘手的。我们可能需要考虑其它的 SQL 性能拓展技术：</p>",4),Hn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%81%94%E5%90%88",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%86%E7%89%87",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%9D%9E%E8%A7%84%E8%8C%83%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%B0%83%E4%BC%98",target:"_blank",rel:"noopener noreferrer"},On=n("p",null,[s("我们也可以考虑将一些数据移至 "),n("strong",null,"NoSQL 数据库"),s("。")],-1),Tn=n("h2",{id:"其它要点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其它要点","aria-hidden":"true"},"#"),s(" 其它要点")],-1),In=n("blockquote",null,[n("p",null,"是否深入这些额外的主题，取决于你的问题范围和剩下的时间。")],-1),Un=n("h4",{id:"nosql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nosql","aria-hidden":"true"},"#"),s(" NoSQL")],-1),Pn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%97%E5%9E%8B%E5%AD%98%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%BF%98%E6%98%AF-nosql",target:"_blank",rel:"noopener noreferrer"},jn=n("h3",{id:"缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#缓存","aria-hidden":"true"},"#"),s(" 缓存")],-1),Kn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#cdn-%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},es={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%9B%B4%E5%86%99%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},as={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%9E%E5%86%99%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},ts={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%B7%E6%96%B0",target:"_blank",rel:"noopener noreferrer"},os=n("h3",{id:"异步与微服务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异步与微服务","aria-hidden":"true"},"#"),s(" 异步与微服务")],-1),rs={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},is={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},ls={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%83%8C%E5%8E%8B",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BE%AE%E6%9C%8D%E5%8A%A1",target:"_blank",rel:"noopener noreferrer"},cs=n("h3",{id:"通信",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通信","aria-hidden":"true"},"#"),s(" 通信")],-1),us={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc",target:"_blank",rel:"noopener noreferrer"},ms={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},hs=n("h3",{id:"安全性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安全性","aria-hidden":"true"},"#"),s(" 安全性")],-1),gs={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%89%E5%85%A8",target:"_blank",rel:"noopener noreferrer"},bs=n("h3",{id:"延迟数值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#延迟数值","aria-hidden":"true"},"#"),s(" 延迟数值")],-1),_s={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},ks=n("h3",{id:"持续探讨",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#持续探讨","aria-hidden":"true"},"#"),s(" 持续探讨")],-1),Es=n("ul",null,[n("li",null,"持续进行基准测试并监控你的系统，以解决他们提出的瓶颈问题。"),n("li",null,"架构拓展是一个迭代的过程。")],-1);function vs(fs,As){const a=o("ExternalLinkIcon"),r=o("RouterLink");return l(),p("div",null,[n("blockquote",null,[n("ul",null,[n("li",null,[s("原文地址："),n("a",d,[s("github.com/donnemartin/system-design-primer"),e(a)])]),n("li",null,[s("译文出自："),n("a",m,[s("掘金翻译计划"),e(a)])]),n("li",null,[s("译者："),n("a",h,[s("XatMassacrE"),e(a)]),s("、"),n("a",g,[s("L9m"),e(a)]),s("、"),n("a",b,[s("Airmacho"),e(a)]),s("、"),n("a",_,[s("xiaoyusilen"),e(a)]),s("、"),n("a",k,[s("jifaxu"),e(a)]),s("、"),n("a",E,[s("根号三"),e(a)])])])]),n("h1",v,[f,s(" 设计 "),n("a",A,[s("Mint.com"),e(a)])]),n("p",null,[n("strong",null,[s("注意：这个文档中的链接会直接指向"),n("a",y,[s("系统设计主题索引"),e(a)]),s("中的有关部分，以避免重复的内容。您可以参考链接的相关内容，来了解其总的要点、方案的权衡取舍以及可选的替代方案。")])]),B,n("p",null,[s("我们可以将 1000 万用户的信息存储在一个"),n("a",D,[s("关系数据库"),e(a)]),s("中。我们应该讨论一下"),n("a",R,[s("选择 SQL 或 NoSQL 之间的用例和权衡"),e(a)]),s("了。")]),n("ul",null,[n("li",null,[q,s(" 作为一个"),n("a",x,[s("反向代理"),e(a)]),s("，发送请求到 "),N]),M,L]),z,n("p",null,[s("我们将在"),C,s("，"),H,s("和"),w,s("等字段上创建一个"),n("a",F,[s("索引"),e(a)]),s("以加速查找（对数时间而不是扫描整个表）并保持数据在内存中。从内存中顺序读取 1 MB 数据花费大约 250 毫秒，而从 SSD 读取是其 4 倍，从磁盘读取是其 80 倍。"),S]),n("p",null,[s("我们将使用公开的"),n("a",O,[T,e(a)]),s(":")]),I,n("p",null,[s("对于内部通信，我们可以使用"),n("a",U,[s("远程过程调用"),e(a)]),s("。")]),P,Q,G,W,Y,n("ul",null,[j,K,n("li",null,[V,s(" 服务器将 job 放在 "),$,s(" 中，如 "),n("a",X,[s("Amazon SQS"),e(a)]),s(" 或者 "),n("a",J,[s("RabbitMQ"),e(a)]),n("ul",null,[n("li",null,[s("提取交易可能需要一段时间，我们可能希望"),n("a",Z,[s("与队列异步"),e(a)]),s("地来做，虽然这会引入额外的复杂度。")])])]),nn]),sn,n("p",null,[s("我们将在 "),en,s("，"),an,s("，和 "),tn,s("字段上创建"),n("a",on,[s("索引"),e(a)]),s("。")]),rn,n("p",null,[s("我们将在"),ln,s("，"),pn,s("字段上创建"),n("a",cn,[s("索引"),e(a)]),s("。")]),un,n("p",null,[s("现在你要 1) "),dn,s("。2) "),mn,s("性能瓶颈。3) 在解决瓶颈问题的同时，评估替代方案、权衡利弊。4) 重复以上步骤。请阅读"),e(r,{to:"/code/system-design/system-design-primer/scaling_aws.html"},{default:c(()=>[s("「设计一个系统，并将其扩大到为数以百万计的 AWS 用户服务」")]),_:1}),s(" 来了解如何逐步扩大初始设计。")]),hn,gn,n("p",null,[bn,s("，请参考"),n("a",_n,[s("系统设计主题索引"),e(a)]),s("相关部分来了解其要点、方案的权衡取舍以及可选的替代方案。")]),n("ul",null,[n("li",null,[n("a",kn,[s("DNS"),e(a)])]),n("li",null,[n("a",En,[s("负载均衡器"),e(a)])]),n("li",null,[n("a",vn,[s("水平拓展"),e(a)])]),n("li",null,[n("a",fn,[s("反向代理（web 服务器）"),e(a)])]),n("li",null,[n("a",An,[s("API 服务（应用层）"),e(a)])]),n("li",null,[n("a",yn,[s("缓存"),e(a)])]),n("li",null,[n("a",Bn,[s("关系型数据库管理系统 (RDBMS)"),e(a)])]),n("li",null,[n("a",Dn,[s("SQL 故障主从切换"),e(a)])]),n("li",null,[n("a",Rn,[s("主从复制"),e(a)])]),n("li",null,[n("a",qn,[s("异步"),e(a)])]),n("li",null,[n("a",xn,[s("一致性模式"),e(a)])]),n("li",null,[n("a",Nn,[s("可用性模式"),e(a)])])]),Mn,n("p",null,[s("参考 "),n("a",Ln,[s("何时更新缓存"),e(a)]),s(" 中权衡和替代的内容。以上方法描述了 "),n("a",zn,[s("cache-aside 缓存模式"),e(a)]),s(".")]),Cn,n("ul",null,[n("li",null,[n("a",Hn,[s("联合"),e(a)])]),n("li",null,[n("a",wn,[s("分片"),e(a)])]),n("li",null,[n("a",Fn,[s("非规范化"),e(a)])]),n("li",null,[n("a",Sn,[s("SQL 调优"),e(a)])])]),On,Tn,In,Un,n("ul",null,[n("li",null,[n("a",Pn,[s("键-值存储"),e(a)])]),n("li",null,[n("a",Qn,[s("文档类型存储"),e(a)])]),n("li",null,[n("a",Gn,[s("列型存储"),e(a)])]),n("li",null,[n("a",Wn,[s("图数据库"),e(a)])]),n("li",null,[n("a",Yn,[s("SQL vs NoSQL"),e(a)])])]),jn,n("ul",null,[n("li",null,[s("在哪缓存 "),n("ul",null,[n("li",null,[n("a",Kn,[s("客户端缓存"),e(a)])]),n("li",null,[n("a",Vn,[s("CDN 缓存"),e(a)])]),n("li",null,[n("a",$n,[s("Web 服务器缓存"),e(a)])]),n("li",null,[n("a",Xn,[s("数据库缓存"),e(a)])]),n("li",null,[n("a",Jn,[s("应用缓存"),e(a)])])])]),n("li",null,[s("什么需要缓存 "),n("ul",null,[n("li",null,[n("a",Zn,[s("数据库查询级别的缓存"),e(a)])]),n("li",null,[n("a",ns,[s("对象级别的缓存"),e(a)])])])]),n("li",null,[s("何时更新缓存 "),n("ul",null,[n("li",null,[n("a",ss,[s("缓存模式"),e(a)])]),n("li",null,[n("a",es,[s("直写模式"),e(a)])]),n("li",null,[n("a",as,[s("回写模式"),e(a)])]),n("li",null,[n("a",ts,[s("刷新"),e(a)])])])])]),os,n("ul",null,[n("li",null,[n("a",rs,[s("消息队列"),e(a)])]),n("li",null,[n("a",is,[s("任务队列"),e(a)])]),n("li",null,[n("a",ls,[s("背压"),e(a)])]),n("li",null,[n("a",ps,[s("微服务"),e(a)])])]),cs,n("ul",null,[n("li",null,[s("可权衡选择的方案： "),n("ul",null,[n("li",null,[s("与客户端的外部通信 - "),n("a",us,[s("使用 REST 作为 HTTP API"),e(a)])]),n("li",null,[s("服务器内部通信 - "),n("a",ds,[s("RPC"),e(a)])])])]),n("li",null,[n("a",ms,[s("服务发现"),e(a)])])]),hs,n("p",null,[s("请参阅"),n("a",gs,[s("「安全」"),e(a)]),s("一章。")]),bs,n("p",null,[s("请参阅"),n("a",_s,[s("「每个程序员都应该知道的延迟数」"),e(a)]),s("。")]),ks,Es])}const Ds=i(u,[["render",vs],["__file","mint.html.vue"]]);export{Ds as default};
