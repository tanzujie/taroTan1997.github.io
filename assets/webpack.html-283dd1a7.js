import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,b as s,e,d as p}from"./app-8cc94dc5.js";const i={},r=p('<h2 id="前端工程化" tabindex="-1"><a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a> 前端工程化</h2><div class="hint-container tip"><p class="hint-container-title">前端工程化的四个「现代化」</p><ul><li>模块化（js 的模块化，css 的模块化，资源的模块化）</li><li>组件化（复用现有的 UI 结构，样式，行为）</li><li>规范化（目录结构的画风，编码规范化，接口规范化，文本规范化， Git 分支管理）</li><li>自动化（自动化构建，自动部署，自动化测试）</li></ul></div><h3 id="什么是前端开发工程化" tabindex="-1"><a class="header-anchor" href="#什么是前端开发工程化" aria-hidden="true">#</a> 什么是前端开发工程化？</h3><p>在企业级的前端项目开发中，把前端开发所需的工具、技术、流程、经验等进行规范化、标准化。</p><p>企业中的 Vue 项目和 React 项目，都是基于工程化的方式开发的。</p><h3 id="前端工程化的解决方案" tabindex="-1"><a class="header-anchor" href="#前端工程化的解决方案" aria-hidden="true">#</a> 前端工程化的解决方案</h3><p>目前流行的：</p>',7),u={href:"http://www.webpackjs.com",target:"_blank",rel:"noopener noreferrer"},d={href:"http://zh.parceljs.org",target:"_blank",rel:"noopener noreferrer"},k=p(`<h2 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>webpack 是前端项目工程化的具体解决方案，它提供了友好的<strong>前端模块化开发</strong>支持，以及<strong>代码压缩混淆</strong>、<strong>处理浏览器端 JavaScript 的兼容性</strong>、<strong>性能优化</strong>等强大的功能。</p></div><h3 id="创建一个-npm-的项目" tabindex="-1"><a class="header-anchor" href="#创建一个-npm-的项目" aria-hidden="true">#</a> 创建一个 npm 的项目</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>  <span class="token comment"># 生成配置文件package.json</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="在项目中安装-webpack" tabindex="-1"><a class="header-anchor" href="#在项目中安装-webpack" aria-hidden="true">#</a> 在项目中安装 webpack</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i webpack@5.42.1 webpack-cli@4.7.2 <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>-D</code> 表示 <code>--save-dev</code>，将安装的包写入 <code>devDependencies</code> 中，表示开发时才会被利用到。默认为 <code>-S</code> 表示 <code>--save</code> ，将安装的包写入 <code>depedencies</code> 中，表示在开发以及生产环境中都会被用到。</p><h3 id="在项目中配置-webpack" tabindex="-1"><a class="header-anchor" href="#在项目中配置-webpack" aria-hidden="true">#</a> 在项目中配置 webpack</h3><ol><li>在项目根目录中，创建名为 <code>webpack.config.js</code> 的 webpack 配置文件，并初始化如下的基本配置：</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 使用 Node.js 中的导出语法，向外导出一个 webpack 的配置对象</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 代表 webpack 运行的模式，可选值为 development、production</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 <code>package.json</code> 的 <code>scripts</code> 节点下，新增 dev 脚本如下：</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// script 节点下的脚本，可以通过 npm run 执行，例如 npm run dev</span>
  <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode=production&quot;</span>  <span class="token comment">// 生产模式打包</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在终端中运行 <code>npm run dev</code> 命令，启动 webpack 进行项目的打包构建</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>webpack 会将所有依赖的 js 文件都整合到一个 main.js 文件中，在 html 中应该直接引用整合后的 main.js 文件。</p></div><h3 id="webpack-中的默认约定" tabindex="-1"><a class="header-anchor" href="#webpack-中的默认约定" aria-hidden="true">#</a> webpack 中的默认约定</h3><p>在 webpack4.x 和 5.x 的版本中，有如下的默认约定：</p><ol><li>默认的打包入口文件为：src→index.js</li><li>默认的输出文件路径为：dist→main.js</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注：可在 <code>webpack.config.js</code> 中修改打包的默认约定</p><p>通过 entry 节点指定打包的入口，通过 output 节点指定打包的出口。</p></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src/index.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webpack-插件的使用" tabindex="-1"><a class="header-anchor" href="#webpack-插件的使用" aria-hidden="true">#</a> webpack 插件的使用</h2><h3 id="一些常用的插件" tabindex="-1"><a class="header-anchor" href="#一些常用的插件" aria-hidden="true">#</a> 一些常用的插件</h3><ol><li><strong>webpack-dev-server</strong><ul><li>每当修改了源代码，webpack 会自动进行项目的打包和构建</li></ul></li><li><strong>html-webpack-plugin</strong><ul><li>webpack 中的 HTML 插件（类似于一个模板引擎插件）</li><li>可以通过此插件自定义 index.html 页面的内容</li><li>插件生成的 html 页面中会自动注入了打包的 main.js 文件</li></ul></li></ol><h3 id="如何使用webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#如何使用webpack-dev-server" aria-hidden="true">#</a> 如何使用<strong>webpack-dev-server</strong></h3><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i webpack-dev-server <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 <code>package.json</code> 中的 <code>scripts</code> 的 <code>dev</code> 命令如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack **serve**&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次运行 <code>npm run dev</code> 命令，重新进行项目的打包</p>`,28),v={href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"},m=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"一些坑"),n("ul",null,[n("li",null,"该插件自动打包生成的 js 文件是存储在内存中的，因此在物理磁盘路径下无法看见"),n("li",null,"该插件生成的 js 文件默认的位置是项目的根目录")])],-1),b=n("h3",{id:"如何使用-html-webpack-plugin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何使用-html-webpack-plugin","aria-hidden":"true"},"#"),s(" 如何使用 html-webpack-plugin")],-1),h={class:"hint-container info"},g=n("p",{class:"hint-container-title"},"相关信息",-1),x=n("p",null,"为什么要用 html-webpack-plugin？",-1),y={href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"},w=p(`<p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i html-webpack-plugin <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 1. 导入 HTML 插件</span>
<span class="token keyword">const</span> HtmlPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 创建 HTML 插件的实例对象</span>
<span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.html&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定原文件的路径</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;./index.html&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定生成文件的路径</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>htmlPlugin<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3. 通过 plugins 节点，使 htmlPlugin 插件生效</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">启动时自动打开浏览器</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动打开浏览器</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 实时打包使用的主机地址</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span> <span class="token comment">//实时打包使用的端口号</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="webpack-中的-loader" tabindex="-1"><a class="header-anchor" href="#webpack-中的-loader" aria-hidden="true">#</a> webpack 中的 loader</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>webpack 默认只能处理.js 文件，当遇到其他文件时它会寻找有没有对应的 loader 能够进行处理。例如，在处理 css 文件时，需要安装处理 css 文件的 loader。</p></div><p>安装 loader：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i style-loader css-loader <span class="token parameter variable">-D</span>
<span class="token function">npm</span> i less-loader - D  <span class="token comment"># 若要处理less文件</span>
<span class="token function">npm</span> i url-loader file-loader <span class="token parameter variable">-D</span> <span class="token comment"># 若要处理图片</span>
<span class="token function">npm</span> i babel-loader @babel/core @babel/plugin-proposal-decorators <span class="token parameter variable">-D</span> <span class="token comment"># 处理高级js语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>webpack.config.js</code> 的 <code>module-&gt;rules</code> 数组中，添加 loader 规则如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 所有第三方文件模块匹配规则</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 文件后缀名的匹配规则</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 允许在js中使用 import &#39;xxx.css&#39; 的方式导入css</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.jpg|png|gif$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;url-loader?limit=20000&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 处理图片，小于等于20000字节的会被转换成base64，否则为地址</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 处理高级js语法，node_modules中的第三方包不需要被打包</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中， <code>test</code> 表示匹配的文件类型，<code>use</code> 表示对应要调用的 loader</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>use 数组中指定的 loader 顺序是固定的</li><li>多个 loader 的调用顺序是：<strong>从后往前调用</strong></li></ul></div><h4 id="配置-babel-loader" tabindex="-1"><a class="header-anchor" href="#配置-babel-loader" aria-hidden="true">#</a> 配置 babel-loader</h4><p>不想看了，省略！</p><p>要创建一个 <code>babel.config.js</code> 文件</p><h3 id="自动清理-dist-目录" tabindex="-1"><a class="header-anchor" href="#自动清理-dist-目录" aria-hidden="true">#</a> 自动清理 dist 目录</h3><p>包：clean-webpack-plugin</p>`,18),q={href:"https://www.npmjs.com/package/clean-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},f=p(`<h3 id="解决-source-map-的问题" tabindex="-1"><a class="header-anchor" href="#解决-source-map-的问题" aria-hidden="true">#</a> 解决 Source Map 的问题</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于 webpack 会进行混淆代码，因此运行时报错的行号可能与源代码的行号不一致，可以使用下面的方法来保持一致：</p></div><p>在配置文件中添加：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;devlopment&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;eval-source-map&quot;</span><span class="token punctuation">,</span> <span class="token comment">// this!</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>考虑到安全原因，建议使用折衷的 <code>nonsources-source-map</code></p></div><h3 id="符号的定义" tabindex="-1"><a class="header-anchor" href="#符号的定义" aria-hidden="true">#</a> @符号的定义</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>import 时，若使用相对路径会使得代码非常繁琐，可以使用@符号代表 src 目录的绝对路径，从外往里指定路径。</p></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function j(_,D){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[s("webpack"),e(a)])]),n("li",null,[n("a",d,[s("parcel"),e(a)])])]),k,n("p",null,[s("在浏览器中访问："),n("a",v,[s("http://localhost:8080"),e(a)]),s(" 地址，查看自动打包效果")]),m,b,n("div",h,[g,x,n("p",null,[s("使用上面的插件时，访问 "),n("a",y,[s("http://localhost:8080"),e(a)]),s(" 地址，默认是打开根目录，但实际的项目入口在 src 文件夹中，因此希望将 src 文件夹中的 index.html 复制一份到根目录下，使得可以直接访问。")])]),w,n("p",null,[s("使用方法："),n("a",q,[s("https://www.npmjs.com/package/clean-webpack-plugin"),e(a)])]),f])}const N=t(i,[["render",j],["__file","webpack.html.vue"]]);export{N as default};
