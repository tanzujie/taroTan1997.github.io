import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,b as n,e as i,d as c,a as s}from"./app-8cf4862e.js";const l={},u=s(`<h2 id="多进程程序例子" tabindex="-1"><a class="header-anchor" href="#多进程程序例子" aria-hidden="true">#</a> 多进程程序例子</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> argparse
<span class="token keyword">import</span> redis
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token punctuation">,</span> Process

parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">&#39;PyTorch MM Training&#39;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--port&#39;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;port id&quot;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--file&#39;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;paths for train instances&quot;</span><span class="token punctuation">)</span>
args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

host <span class="token operator">=</span> <span class="token string">&#39;127.0.0.1&#39;</span>
port <span class="token operator">=</span> args<span class="token punctuation">.</span>port

<span class="token comment"># r = redis.Redis(host=host, port=port)</span>

train_file <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token builtin">file</span>

<span class="token keyword">def</span> <span class="token function">worker_i</span><span class="token punctuation">(</span>train_file<span class="token punctuation">,</span> i<span class="token punctuation">,</span> nums<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span>port<span class="token punctuation">)</span>
    k <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        iter_ <span class="token operator">=</span> tqdm<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>train_file<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        iter_ <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>train_file<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> info <span class="token keyword">in</span> iter_<span class="token punctuation">:</span>
        <span class="token keyword">if</span> k <span class="token operator">%</span> nums <span class="token operator">==</span> i<span class="token punctuation">:</span> <span class="token comment"># 将多个任务分成nums份</span>
            r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> info<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        k <span class="token operator">+=</span> <span class="token number">1</span>
process_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

nums <span class="token operator">=</span> <span class="token number">8</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker_i<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>train_file<span class="token punctuation">,</span> i<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    process_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> process_list<span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;写入完成&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python-中的三种并发编程方式" tabindex="-1"><a class="header-anchor" href="#python-中的三种并发编程方式" aria-hidden="true">#</a> Python 中的三种并发编程方式</h2><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/tch30Z.png" alt="tch30Z" tabindex="0" loading="lazy"><figcaption>tch30Z</figcaption></figure><h3 id="三种方式-多线程-thread-、多进程-process-、协程-coroutine" tabindex="-1"><a class="header-anchor" href="#三种方式-多线程-thread-、多进程-process-、协程-coroutine" aria-hidden="true">#</a> 三种方式：多线程（Thread）、多进程（Process）、协程（Coroutine）</h3><h3 id="什么是-cpu-密集型计算、io-密集型计算" tabindex="-1"><a class="header-anchor" href="#什么是-cpu-密集型计算、io-密集型计算" aria-hidden="true">#</a> 什么是 CPU 密集型计算、IO 密集型计算</h3><ul><li>CPU 密集型计算（CPU-bound）： <ul><li>例如：压缩解压缩、加密解密</li></ul></li><li>IO 密集型计算（I/O bound）： <ul><li>爬虫、文件处理等</li></ul></li></ul><h3 id="多线程、多进程、协程的对比" tabindex="-1"><a class="header-anchor" href="#多线程、多进程、协程的对比" aria-hidden="true">#</a> 多线程、多进程、协程的对比</h3><ul><li>多进程 Process（multiprocessing） <ul><li>优点：可以利用多核 CPU 并行运算</li><li>缺点：占用资源最多、可启动数目比线程少</li><li>适用于：CPU 密集型计算</li></ul></li><li>多线程 Thread（threading） <ul><li>优点：相比进程，更轻量级、占用资源少</li><li>缺点： <ul><li>相比进程：多线程只能并发执行，不能利用多 CPU（GIL）</li><li>相比协程：启动数目有限制，占用内存资源，有线程切换开销</li></ul></li><li>适用于：IO 密集型计算、同时允许的任务数目要求不多</li></ul></li><li>协程 Coroutine（asyncio） <ul><li>优点：内存开销最少、启动协程数量最多</li><li>缺点：支持的库有限制（aiohttp vs requests）、代码实现复杂</li><li>适用于：IO 密集型计算、需要超多任务运行、但有现成库支持的场景</li></ul></li></ul><h3 id="怎样根据任务选择对应技术" tabindex="-1"><a class="header-anchor" href="#怎样根据任务选择对应技术" aria-hidden="true">#</a> 怎样根据任务选择对应技术</h3><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/UsvTjR.png" alt="UsvTjR" tabindex="0" loading="lazy"><figcaption>UsvTjR</figcaption></figure><h2 id="全局解释器锁-gil-global-interpreter-lock" tabindex="-1"><a class="header-anchor" href="#全局解释器锁-gil-global-interpreter-lock" aria-hidden="true">#</a> 全局解释器锁 GIL（Global Interpreter Lock）</h2><p>Python 速度慢的两大原因：</p><ul><li>动态类型语言，边解释边执行</li><li>GIL，无法利用多核 CPU 并发执行</li></ul><p>全局解释器锁：</p><ul><li>是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。</li><li>即便在多核处理器上，使用 GIL 的解释器也<strong>只能允许同一时间执行一个线</strong>程。相比并发加速的 C++/JAVA 会慢很多。</li><li>原因详解 <ul><li>为了解决多线程之间数据完整性和状态同步问题。</li><li>Python 中对象的管理，维护了每个对象的引用计数，在多线程时，为了保证引用计数的一致性，使用了锁的机制。</li></ul></li></ul><p>怎样规避 GIL 带来的限制：</p><ul><li>那 Python 中的线程无法同时运行，为什么还要使用多线程机制呢？多线程机制在 Python 中依然是有用的，由于<strong>IO 密集型计算</strong>，因为 IO 期间，线程会释放 GIL，实现 CPU 和 IO 的并行，因此多线程用于 IO 密集型计算依然可以大幅提升速度。</li><li>使用 multiprocessing 的多进程机制实现并行计算、利用多核 CPU 优势。</li></ul><h2 id="python-多线程代码" tabindex="-1"><a class="header-anchor" href="#python-多线程代码" aria-hidden="true">#</a> Python 多线程代码</h2><h3 id="直接创建线程" tabindex="-1"><a class="header-anchor" href="#直接创建线程" aria-hidden="true">#</a> 直接创建线程</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

<span class="token keyword">def</span> <span class="token function">craw</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 1. 准备一个函数</span>
	r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">multi_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 2. 准备一个线程list</span>
	<span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>
		threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>  <span class="token comment"># 3. 创建线程</span>
			threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>craw<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span>

	<span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>
		thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 4. 启动线程</span>

	<span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>
		thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 5. 等待结束</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用线程池threadpoolexecutor" tabindex="-1"><a class="header-anchor" href="#使用线程池threadpoolexecutor" aria-hidden="true">#</a> 使用线程池<strong>ThreadPoolExecutor</strong></h3><p>用法 1：使用 map 函数（所有任务一起提交）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor
<span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>
		result <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>craw<span class="token punctuation">,</span> urls<span class="token punctuation">)</span>
		<span class="token comment"># map的结果和入参的顺序对应的</span>
		<span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>
				<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法 2：future 模式，更强大（一个任务一个任务提交）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> as_completed
<span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>
		<span class="token comment"># 使用 dict 可以知道future对应的入参</span>
		futures <span class="token operator">=</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>craw<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span> url
								<span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">}</span>
		<span class="token comment"># 方式1: 结果仍然按顺序</span>
		<span class="token keyword">for</span> future<span class="token punctuation">,</span> url <span class="token keyword">in</span> futures<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
				<span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token comment"># 方式2: 使用 as_completed 顺序是不定的</span>
		<span class="token keyword">for</span> future <span class="token keyword">in</span> as_completed<span class="token punctuation">(</span>futures<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 注：字典的遍历是遍历key</span>
				url <span class="token operator">=</span> futures<span class="token punctuation">[</span>future<span class="token punctuation">]</span>
				<span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86">线程池原理</a></p><h2 id="python-多进程代码" tabindex="-1"><a class="header-anchor" href="#python-多进程代码" aria-hidden="true">#</a> Python 多进程代码</h2><p>多线程 threading 与多进程 multiprocessing 的代码对比</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/oMERIi.png" alt="oMERIi" tabindex="0" loading="lazy"><figcaption>oMERIi</figcaption></figure><p>直接改个类名就能运行！</p><p>所以代码去看 <a href="#python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BB%A3%E7%A0%81">Python 多线程代码</a></p><h3 id="多进程优雅退出" tabindex="-1"><a class="header-anchor" href="#多进程优雅退出" aria-hidden="true">#</a> 多进程优雅退出</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> ctypes
<span class="token keyword">import</span> time
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> RawValue

<span class="token keyword">class</span> <span class="token class-name">CountdownTask</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_running <span class="token operator">=</span> RawValue<span class="token punctuation">(</span>ctypes<span class="token punctuation">.</span>c_bool<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">terminate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_running<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>_running<span class="token punctuation">.</span>value <span class="token keyword">and</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;T-minus&#39;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
            n <span class="token operator">-=</span> <span class="token number">1</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

c <span class="token operator">=</span> CountdownTask<span class="token punctuation">(</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>c<span class="token punctuation">.</span>run<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Signal termination</span>
t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Wait for actual termination (if needed)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程池原理" tabindex="-1"><a class="header-anchor" href="#线程池原理" aria-hidden="true">#</a> 线程池原理</h2><h3 id="线程池的原理" tabindex="-1"><a class="header-anchor" href="#线程池的原理" aria-hidden="true">#</a> 线程池的原理</h3><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/YPT9vT.png" alt="YPT9vT" tabindex="0" loading="lazy"><figcaption>YPT9vT</figcaption></figure><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><ul><li>使用任务队列</li><li>可重用线程</li></ul><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>提升性能：减少创建终止线程开销，重用线程资源</li><li>适用场景：突发性大量请求、但任务处理时间较短</li><li>防御功能：避免系统因为创建线程过多导致负荷过大</li><li>代码优势：简洁方便</li></ul><h2 id="协程的原理以及代码" tabindex="-1"><a class="header-anchor" href="#协程的原理以及代码" aria-hidden="true">#</a> 协程的原理以及代码</h2>`,42),r={href:"https://www.bilibili.com/video/BV1bK411A7tV?p=11",target:"_blank",rel:"noopener noreferrer"},d=s(`<h3 id="协程的原理" tabindex="-1"><a class="header-anchor" href="#协程的原理" aria-hidden="true">#</a> 协程的原理</h3><p>协程：在<strong>单线程内</strong>实现并发</p><ul><li>核心原理：用一个超级循环（其实就是 while true）循环，配合 IO 多路复用原理（IO 时 CPU 可以干其他事情）</li><li>于是在等待 IO 时，CPU 会同时开始计算下一个循环的 IO 前的部分，并开启多轮循环同时进行的局面</li><li>等待 IO 结束，CPU 将剩余部分的代码再一并执行</li></ul><p><strong>单线程爬虫执行路径</strong></p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/dFUEmJ.png" alt="dFUEmJ" tabindex="0" loading="lazy"><figcaption>dFUEmJ</figcaption></figure><p><strong>协程爬虫执行路径</strong></p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/OSigeS.png" alt="OSigeS" tabindex="0" loading="lazy"><figcaption>OSigeS</figcaption></figure><h3 id="协程的使用以及异步-io" tabindex="-1"><a class="header-anchor" href="#协程的使用以及异步-io" aria-hidden="true">#</a> 协程的使用以及异步 IO</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token comment"># 获取事件循环（超级循环）</span>
loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 定义协程</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">myfunc</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">await</span> get_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

<span class="token comment"># 创建task列表</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span>loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>myfunc<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>

<span class="token comment"># 执行爬虫事件列表</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键字<strong>async</strong>：表示定义一个协程。</p><p>关键字<strong>await</strong>：表示后面的函数是一个异步 IO，并且不进行阻塞，而是直接在超级循环直接进入下一个任务的执行（当前任务放弃 CPU，下一个任务获得 CPU）。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>异步 IO 中依赖的库必须支持异步 IO 特性（这要求库在 IO 时不能阻塞，否则切换不到下一个任务了）</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>requests 库不支持异步 IO，需要使用 aiohttp 库</p></div><p>例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio<span class="token punctuation">,</span> aiohtttp

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_craw</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>
				<span class="token keyword">async</span> <span class="token keyword">with</span> sess<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>
						result <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>
						<span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span>loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>async_craw<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的异步对象也需要使用 async 关键字来标注。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>协程与普通函数运行的不同点在于协程需要使用超级循环来进行调度。</p></div><h3 id="协程并发度的控制" tabindex="-1"><a class="header-anchor" href="#协程并发度的控制" aria-hidden="true">#</a> 协程并发度的控制</h3><p>可以使用 <a href="#%E4%BF%A1%E5%8F%B7%E9%87%8F-semaphore">信号量 Semaphore</a> 来进行控制：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio<span class="token punctuation">,</span> aiohtttp

semaphore <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_craw</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">async</span> <span class="token keyword">with</span> semaphore<span class="token punctuation">:</span>  <span class="token comment"># here</span>
				<span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>
						<span class="token keyword">async</span> <span class="token keyword">with</span> sess<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>
								result <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>
								<span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span>loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>async_craw<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="信号量-semaphore" tabindex="-1"><a class="header-anchor" href="#信号量-semaphore" aria-hidden="true">#</a> 信号量 Semaphore</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>信号量一般用于访问有限数量的共享资源。</p></div><p>信号量是一个<strong>同步对象</strong>，用于保持在 0 至指定最大值之间的一个计数器。</p><ul><li>当线程完成一次对改 semaphore 对象的等待（wait）时，该计数器减一</li><li>当线程完成一次对改 semaphore 对象的释放（release）时，该计数器加一</li><li>当计数器为 0 时，线程等待该 semaphore 对象不再能成功直到该 semaphore 对象变成 signaled 状态（阻塞） <ul><li>计数器大于 0，为 signaled 状态</li><li>计数器等于 0，为 nonsignaled 状态</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 方法一：使用with</span>
sem <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment"># ...later</span>
<span class="token keyword">async</span> <span class="token keyword">with</span> sem<span class="token punctuation">:</span>
		<span class="token comment"># work with shared resource</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 方法二：手动acquire、release</span>
sem <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment"># ...later</span>
<span class="token keyword">await</span> sem<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
		<span class="token comment"># work with shared resource</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
		sem<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function k(v,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",r,[i("【2021 最新版】Python 并发编程实战，用多线程、多进程、多协程加速程序运行_哔哩哔哩_bilibili"),c(a)])]),d])}const y=t(l,[["render",k],["__file","python-concurrent.html.vue"]]);export{y as default};
