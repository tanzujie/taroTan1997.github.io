import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as l,a as n,b as s,e,w as c,d as t}from"./app-8cc94dc5.js";const u={},d={href:"https://github.com/donnemartin/system-design-primer",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/xitu/gold-miner",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/XatMassacrE",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/L9m",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/Airmacho",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/xiaoyusilen",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/jifaxu",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/sqrthree",target:"_blank",rel:"noopener noreferrer"},f=n("h1",{id:"为社交网络设计数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为社交网络设计数据结构","aria-hidden":"true"},"#"),s(" 为社交网络设计数据结构")],-1),y={href:"https://github.com/donnemartin/system-design-primer#index-of-system-design-topics",target:"_blank",rel:"noopener noreferrer"},w=t('<h2 id="第-1-步-用例和约束概要" tabindex="-1"><a class="header-anchor" href="#第-1-步-用例和约束概要" aria-hidden="true">#</a> 第 1 步：用例和约束概要</h2><blockquote><p>收集需求并调查问题。<br> 通过提问清晰用例和约束。<br> 讨论假设。</p></blockquote><p>如果没有面试官提出明确的问题，我们将自己定义一些用例和约束条件。</p><h3 id="用例" tabindex="-1"><a class="header-anchor" href="#用例" aria-hidden="true">#</a> 用例</h3><h4 id="我们就处理以下用例审视这一问题" tabindex="-1"><a class="header-anchor" href="#我们就处理以下用例审视这一问题" aria-hidden="true">#</a> 我们就处理以下用例审视这一问题</h4><ul><li><strong>用户</strong> 寻找某人并显示与被寻人之间的最短路径</li><li><strong>服务</strong> 高可用</li></ul><h3 id="约束和假设" tabindex="-1"><a class="header-anchor" href="#约束和假设" aria-hidden="true">#</a> 约束和假设</h3><h4 id="状态假设" tabindex="-1"><a class="header-anchor" href="#状态假设" aria-hidden="true">#</a> 状态假设</h4><ul><li>流量分布不均 <ul><li>某些搜索比别的更热门，同时某些搜索仅执行一次</li></ul></li><li>图数据不适用单一机器</li><li>图的边没有权重</li><li>1 千万用户</li><li>每个用户平均有 50 个朋友</li><li>每月 10 亿次朋友搜索</li></ul>',9),q={href:"http://graphql.org/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://neo4j.com/",target:"_blank",rel:"noopener noreferrer"},N=t(`<h4 id="计算使用" tabindex="-1"><a class="header-anchor" href="#计算使用" aria-hidden="true">#</a> 计算使用</h4><p><strong>向你的面试官厘清你是否应该做粗略的使用计算</strong></p><ul><li>50 亿朋友关系 <ul><li>1 亿用户 * 平均每人 50 个朋友</li></ul></li><li>每秒 400 次搜索请求</li></ul><p>便捷的转换指南：</p><ul><li>每月 250 万秒</li><li>每秒 1 个请求 = 每月 250 万次请求</li><li>每秒 40 个请求 = 每月 1 亿次请求</li><li>每秒 400 个请求 = 每月 10 亿次请求</li></ul><h2 id="第-2-步-创建高级设计方案" tabindex="-1"><a class="header-anchor" href="#第-2-步-创建高级设计方案" aria-hidden="true">#</a> 第 2 步：创建高级设计方案</h2><blockquote><p>用所有重要组件概述高水平设计</p></blockquote><figure><img src="http://i.imgur.com/wxXyq2J.png" alt="Imgur" tabindex="0" loading="lazy"><figcaption>Imgur</figcaption></figure><h2 id="第-3-步-设计核心组件" tabindex="-1"><a class="header-anchor" href="#第-3-步-设计核心组件" aria-hidden="true">#</a> 第 3 步：设计核心组件</h2><blockquote><p>深入每个核心组件的细节。</p></blockquote><h3 id="用例-用户搜索某人并查看到被搜人的最短路径" tabindex="-1"><a class="header-anchor" href="#用例-用户搜索某人并查看到被搜人的最短路径" aria-hidden="true">#</a> 用例： 用户搜索某人并查看到被搜人的最短路径</h3><p><strong>和你的面试官说清你期望的代码量</strong></p><p>没有百万用户（点）的和十亿朋友关系（边）的限制，我们能够用一般 BFS 方法解决无权重最短路径任务：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>Graph<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">shortest_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> source <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> dest <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> source <span class="token keyword">is</span> dest<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>source<span class="token punctuation">.</span>key<span class="token punctuation">]</span>
        prev_node_keys <span class="token operator">=</span> self<span class="token punctuation">.</span>_shortest_path<span class="token punctuation">(</span>source<span class="token punctuation">,</span> dest<span class="token punctuation">)</span>
        <span class="token keyword">if</span> prev_node_keys <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            path_ids <span class="token operator">=</span> <span class="token punctuation">[</span>dest<span class="token punctuation">.</span>key<span class="token punctuation">]</span>
            prev_node_key <span class="token operator">=</span> prev_node_keys<span class="token punctuation">[</span>dest<span class="token punctuation">.</span>key<span class="token punctuation">]</span>
            <span class="token keyword">while</span> prev_node_key <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                path_ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>prev_node_key<span class="token punctuation">)</span>
                prev_node_key <span class="token operator">=</span> prev_node_keys<span class="token punctuation">[</span>prev_node_key<span class="token punctuation">]</span>
            <span class="token keyword">return</span> path_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">_shortest_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">:</span>
        queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>source<span class="token punctuation">)</span>
        prev_node_keys <span class="token operator">=</span> <span class="token punctuation">{</span>source<span class="token punctuation">.</span>key<span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">}</span>
        source<span class="token punctuation">.</span>visit_state <span class="token operator">=</span> State<span class="token punctuation">.</span>visited
        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>
            node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> node <span class="token keyword">is</span> dest<span class="token punctuation">:</span>
                <span class="token keyword">return</span> prev_node_keys
            prev_node <span class="token operator">=</span> node
            <span class="token keyword">for</span> adj_node <span class="token keyword">in</span> node<span class="token punctuation">.</span>adj_nodes<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> adj_node<span class="token punctuation">.</span>visit_state <span class="token operator">==</span> State<span class="token punctuation">.</span>unvisited<span class="token punctuation">:</span>
                    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>adj_node<span class="token punctuation">)</span>
                    prev_node_keys<span class="token punctuation">[</span>adj_node<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> prev_node<span class="token punctuation">.</span>key
                    adj_node<span class="token punctuation">.</span>visit_state <span class="token operator">=</span> State<span class="token punctuation">.</span>visited
        <span class="token keyword">return</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),S=n("strong",null,"人员服务器",-1),j={href:"https://github.com/donnemartin/system-design-primer#sharding",target:"_blank",rel:"noopener noreferrer"},L=n("strong",null,"查询服务",-1),I=n("strong",null,"客户端",-1),B=n("strong",null,"服务器",-1),P=n("strong",null,"服务器",-1),Q={href:"https://github.com/donnemartin/system-design-primer#reverse-proxy-web-server",target:"_blank",rel:"noopener noreferrer"},A=t("<li><strong>搜索 API</strong> 服务器向 <strong>用户图服务</strong> 转发请求</li><li><strong>用户图服务</strong> 有以下功能： <ul><li>使用 <strong>查询服务</strong> 找到当前用户信息存储的 <strong>人员服务器</strong></li><li>找到适当的 <strong>人员服务器</strong> 检索当前用户的 <code>friend_ids</code> 列表</li><li>把当前用户作为 <code>source</code> 运行 BFS 搜索算法同时 当前用户的 <code>friend_ids</code> 作为每个 <code>adjacent_node</code> 的 ids</li><li>给定 id 获取 <code>adjacent_node</code>: <ul><li><strong>用户图服务</strong> 将 <strong>再次</strong> 和 <strong>查询服务</strong> 通讯，最后判断出和给定 id 相匹配的存储 <code>adjacent_node</code> 的 <strong>人员服务器</strong>（有待优化）</li></ul></li></ul></li>",2),E=t(`<p><strong>和你的面试官说清你应该写的代码量</strong></p><p><strong>注释</strong>：简易版错误处理执行如下。询问你是否需要编写适当的错误处理方法。</p><p><strong>查询服务</strong> 实现：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LookupService</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>lookup <span class="token operator">=</span> self<span class="token punctuation">.</span>_init_lookup<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># key: person_id, value: person_server</span>

    <span class="token keyword">def</span> <span class="token function">_init_lookup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">lookup_person_server</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> person_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>lookup<span class="token punctuation">[</span>person_id<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>人员服务器</strong> 实现：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PersonServer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>people <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment"># key: person_id, value: person</span>

    <span class="token keyword">def</span> <span class="token function">add_person</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">people</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">:</span>
        results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> ids<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">id</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>people<span class="token punctuation">:</span>
                results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>people<span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> results
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用户</strong> 实现：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> friend_ids<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">id</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>friend_ids <span class="token operator">=</span> friend_ids
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用户图服务</strong> 实现：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserGraphService</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lookup_service<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>lookup_service <span class="token operator">=</span> lookup_service

    <span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> person_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
        person_server <span class="token operator">=</span> self<span class="token punctuation">.</span>lookup_service<span class="token punctuation">.</span>lookup_person_server<span class="token punctuation">(</span>person_id<span class="token punctuation">)</span>
        <span class="token keyword">return</span> person_server<span class="token punctuation">.</span>people<span class="token punctuation">(</span><span class="token punctuation">[</span>person_id<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">shortest_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> source_key<span class="token punctuation">,</span> dest_key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> source_key <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> dest_key <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> source_key <span class="token keyword">is</span> dest_key<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>source_key<span class="token punctuation">]</span>
        prev_node_keys <span class="token operator">=</span> self<span class="token punctuation">.</span>_shortest_path<span class="token punctuation">(</span>source_key<span class="token punctuation">,</span> dest_key<span class="token punctuation">)</span>
        <span class="token keyword">if</span> prev_node_keys <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># Iterate through the path_ids backwards, starting at dest_key</span>
            path_ids <span class="token operator">=</span> <span class="token punctuation">[</span>dest_key<span class="token punctuation">]</span>
            prev_node_key <span class="token operator">=</span> prev_node_keys<span class="token punctuation">[</span>dest_key<span class="token punctuation">]</span>
            <span class="token keyword">while</span> prev_node_key <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                path_ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>prev_node_key<span class="token punctuation">)</span>
                prev_node_key <span class="token operator">=</span> prev_node_keys<span class="token punctuation">[</span>prev_node_key<span class="token punctuation">]</span>
            <span class="token comment"># Reverse the list since we iterated backwards</span>
            <span class="token keyword">return</span> path_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">_shortest_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> source_key<span class="token punctuation">,</span> dest_key<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Use the id to get the Person</span>
        source <span class="token operator">=</span> self<span class="token punctuation">.</span>person<span class="token punctuation">(</span>source_key<span class="token punctuation">)</span>
        <span class="token comment"># Update our bfs queue</span>
        queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>source<span class="token punctuation">)</span>
        <span class="token comment"># prev_node_keys keeps track of each hop from</span>
        <span class="token comment"># the source_key to the dest_key</span>
        prev_node_keys <span class="token operator">=</span> <span class="token punctuation">{</span>source_key<span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">}</span>
        <span class="token comment"># We&#39;ll use visited_ids to keep track of which nodes we&#39;ve</span>
        <span class="token comment"># visited, which can be different from a typical bfs where</span>
        <span class="token comment"># this can be stored in the node itself</span>
        visited_ids <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        visited_ids<span class="token punctuation">.</span>add<span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>
            node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> node<span class="token punctuation">.</span>key <span class="token keyword">is</span> dest_key<span class="token punctuation">:</span>
                <span class="token keyword">return</span> prev_node_keys
            prev_node <span class="token operator">=</span> node
            <span class="token keyword">for</span> friend_id <span class="token keyword">in</span> node<span class="token punctuation">.</span>friend_ids<span class="token punctuation">:</span>
                <span class="token keyword">if</span> friend_id <span class="token keyword">not</span> <span class="token keyword">in</span> visited_ids<span class="token punctuation">:</span>
                    friend_node <span class="token operator">=</span> self<span class="token punctuation">.</span>person<span class="token punctuation">(</span>friend_id<span class="token punctuation">)</span>
                    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>friend_node<span class="token punctuation">)</span>
                    prev_node_keys<span class="token punctuation">[</span>friend_id<span class="token punctuation">]</span> <span class="token operator">=</span> prev_node<span class="token punctuation">.</span>key
                    visited_ids<span class="token punctuation">.</span>add<span class="token punctuation">(</span>friend_id<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),R={href:"https://github.com/donnemartin/system-design-primer#representational-state-transfer-rest",target:"_blank",rel:"noopener noreferrer"},z=n("strong",null,"REST API",-1),C=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ curl https://social.com/api/v1/friend_search?person_id=1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>响应：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
    &quot;person_id&quot;: &quot;100&quot;,
    &quot;name&quot;: &quot;foo&quot;,
    &quot;link&quot;: &quot;https://social.com/foo&quot;,
},
{
    &quot;person_id&quot;: &quot;53&quot;,
    &quot;name&quot;: &quot;bar&quot;,
    &quot;link&quot;: &quot;https://social.com/bar&quot;,
},
{
    &quot;person_id&quot;: &quot;1234&quot;,
    &quot;name&quot;: &quot;baz&quot;,
    &quot;link&quot;: &quot;https://social.com/baz&quot;,
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),F={href:"https://github.com/donnemartin/system-design-primer#remote-procedure-call-rpc",target:"_blank",rel:"noopener noreferrer"},G=n("h2",{id:"第-4-步-扩展设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第-4-步-扩展设计","aria-hidden":"true"},"#"),s(" 第 4 步：扩展设计")],-1),T=n("blockquote",null,[n("p",null,"在给定约束条件下，定义和确认瓶颈。")],-1),W=n("figure",null,[n("img",{src:"http://i.imgur.com/cdCv5g7.png",alt:"Imgur",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Imgur")],-1),D=n("p",null,[n("strong",null,"重要：别简化从最初设计到最终设计的过程！")],-1),M=n("strong",null,"基准/负载 测试",-1),V=n("strong",null,"概述",-1),U=n("p",null,[s("讨论最初设计可能遇到的瓶颈和处理方法十分重要。例如，什么问题可以通过添加多台 "),n("strong",null,"Web 服务器"),s(" 作为 "),n("strong",null,"负载均衡"),s(" 解决？"),n("strong",null,"CDN"),s("？"),n("strong",null,"主从副本"),s("？每个问题都有哪些替代和 "),n("strong",null,"折中"),s(" 方案？")],-1),X=n("p",null,"我们即将介绍一些组件来完成设计和解决扩展性问题。内部负载均衡不显示以减少混乱。",-1),H=n("strong",null,"避免重复讨论",-1),J={href:"https://github.com/donnemartin/system-design-primer#index-of-system-design-topics",target:"_blank",rel:"noopener noreferrer"},$={href:"https://github.com/donnemartin/system-design-primer#domain-name-system",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/donnemartin/system-design-primer#load-balancer",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/donnemartin/system-design-primer#horizontal-scaling",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/donnemartin/system-design-primer#reverse-proxy-web-server",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/donnemartin/system-design-primer#application-layer",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://github.com/donnemartin/system-design-primer#cache",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://github.com/donnemartin/system-design-primer#consistency-patterns",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github.com/donnemartin/system-design-primer#availability-patterns",target:"_blank",rel:"noopener noreferrer"},an=n("p",null,[s("解决 "),n("strong",null,"平均"),s(" 每秒 400 次请求的限制（峰值），人员数据可以存在例如 Redis 或 Memcached 这样的 "),n("strong",null,"内存"),s(" 中以减少响应次数和下游流量通信服务。这尤其在用户执行多次连续查询和查询哪些广泛连接的人时十分有用。从内存中读取 1MB 数据大约要 250 微秒，从 SSD 中读取同样大小的数据时间要长 4 倍，从硬盘要长 80 倍。"),n("sup",null,[n("a",{href:"https://github.com/donnemartin/system-design-primer#latency-numbers-every-programmer-should-know"},"1")])],-1),tn=n("p",null,"以下是进一步优化方案：",-1),on=n("li",null,[s("在 "),n("strong",null,"内存"),s(" 中存储完整的或部分的 BFS 遍历加快后续查找")],-1),pn=n("li",null,[s("在 "),n("strong",null,"NoSQL 数据库"),s(" 中批量离线计算并存储完整的或部分的 BFS 遍历加快后续查找")],-1),rn=n("strong",null,"人员服务器",-1),ln={href:"https://github.com/donnemartin/system-design-primer#sharding",target:"_blank",rel:"noopener noreferrer"},cn=n("strong",null,"人员服务器",-1),un=n("li",null,"同时进行两个 BFS 查找，一个从 source 开始，一个从 destination 开始，然后合并两个路径",-1),dn={href:"https://en.wikipedia.org/wiki/Six_degrees_of_separation",target:"_blank",rel:"noopener noreferrer"},kn=n("li",null,"在询问用户是否继续查询之前设置基于时间或跳跃数阈值，当在某些案例中搜索耗费时间过长时。",-1),hn={href:"https://neo4j.com/",target:"_blank",rel:"noopener noreferrer"},mn=n("strong",null,"图数据库",-1),_n={href:"http://graphql.org/",target:"_blank",rel:"noopener noreferrer"},vn=n("strong",null,"图数据库",-1),bn=n("h2",{id:"额外的话题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#额外的话题","aria-hidden":"true"},"#"),s(" 额外的话题")],-1),gn=n("blockquote",null,[n("p",null,"根据问题的范围和剩余时间，还需要深入讨论其他问题。")],-1),fn=n("h3",{id:"sql-扩展模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sql-扩展模式","aria-hidden":"true"},"#"),s(" SQL 扩展模式")],-1),yn={href:"https://github.com/donnemartin/system-design-primer#master-slave-replication",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://github.com/donnemartin/system-design-primer#federation",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://github.com/donnemartin/system-design-primer#sharding",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://github.com/donnemartin/system-design-primer#denormalization",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://github.com/donnemartin/system-design-primer#sql-tuning",target:"_blank",rel:"noopener noreferrer"},Sn=n("h4",{id:"nosql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nosql","aria-hidden":"true"},"#"),s(" NoSQL")],-1),jn={href:"https://github.com/donnemartin/system-design-primer#key-value-store",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://github.com/donnemartin/system-design-primer#document-store",target:"_blank",rel:"noopener noreferrer"},In={href:"https://github.com/donnemartin/system-design-primer#wide-column-store",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://github.com/donnemartin/system-design-primer#graph-database",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://github.com/donnemartin/system-design-primer#sql-or-nosql",target:"_blank",rel:"noopener noreferrer"},Qn=n("h3",{id:"缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#缓存","aria-hidden":"true"},"#"),s(" 缓存")],-1),An={href:"https://github.com/donnemartin/system-design-primer#client-caching",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github.com/donnemartin/system-design-primer#cdn-caching",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://github.com/donnemartin/system-design-primer#web-server-caching",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://github.com/donnemartin/system-design-primer#database-caching",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://github.com/donnemartin/system-design-primer#application-caching",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://github.com/donnemartin/system-design-primer#caching-at-the-database-query-level",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://github.com/donnemartin/system-design-primer#caching-at-the-object-level",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://github.com/donnemartin/system-design-primer#cache-aside",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://github.com/donnemartin/system-design-primer#write-through",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://github.com/donnemartin/system-design-primer#write-behind-write-back",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://github.com/donnemartin/system-design-primer#refresh-ahead",target:"_blank",rel:"noopener noreferrer"},Vn=n("h3",{id:"异步性和微服务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异步性和微服务","aria-hidden":"true"},"#"),s(" 异步性和微服务")],-1),Un={href:"https://github.com/donnemartin/system-design-primer#message-queues",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://github.com/donnemartin/system-design-primer#task-queues",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://github.com/donnemartin/system-design-primer#back-pressure",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://github.com/donnemartin/system-design-primer#microservices",target:"_blank",rel:"noopener noreferrer"},$n=n("h3",{id:"沟通",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#沟通","aria-hidden":"true"},"#"),s(" 沟通")],-1),Kn={href:"https://github.com/donnemartin/system-design-primer#representational-state-transfer-rest",target:"_blank",rel:"noopener noreferrer"},On={href:"https://github.com/donnemartin/system-design-primer#remote-procedure-call-rpc",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://github.com/donnemartin/system-design-primer#service-discovery",target:"_blank",rel:"noopener noreferrer"},Zn=n("h3",{id:"安全性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安全性","aria-hidden":"true"},"#"),s(" 安全性")],-1),ns={href:"https://github.com/donnemartin/system-design-primer#security",target:"_blank",rel:"noopener noreferrer"},ss=n("h3",{id:"延迟数字指标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#延迟数字指标","aria-hidden":"true"},"#"),s(" 延迟数字指标")],-1),es={href:"https://github.com/donnemartin/system-design-primer#latency-numbers-every-programmer-should-know",target:"_blank",rel:"noopener noreferrer"},as=n("h3",{id:"正在进行",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#正在进行","aria-hidden":"true"},"#"),s(" 正在进行")],-1),ts=n("ul",null,[n("li",null,"继续基准测试并监控你的系统以解决出现的瓶颈问题"),n("li",null,"扩展是一个迭代的过程")],-1);function os(ps,is){const a=o("ExternalLinkIcon"),p=o("RouterLink");return r(),l("div",null,[n("blockquote",null,[n("ul",null,[n("li",null,[s("原文地址："),n("a",d,[s("github.com/donnemartin/system-design-primer"),e(a)])]),n("li",null,[s("译文出自："),n("a",k,[s("掘金翻译计划"),e(a)])]),n("li",null,[s("译者："),n("a",h,[s("XatMassacrE"),e(a)]),s("、"),n("a",m,[s("L9m"),e(a)]),s("、"),n("a",_,[s("Airmacho"),e(a)]),s("、"),n("a",v,[s("xiaoyusilen"),e(a)]),s("、"),n("a",b,[s("jifaxu"),e(a)]),s("、"),n("a",g,[s("根号三"),e(a)])])])]),f,n("p",null,[n("strong",null,[s("注释：为了避免重复，这篇文章的链接直接关联到 "),n("a",y,[s("系统设计主题"),e(a)]),s(" 的相关章节。为一讨论要点、折中方案和可选方案做参考。")])]),w,n("p",null,[s("训练使用更传统的系统 - 别用图特有的解决方案例如 "),n("a",q,[s("GraphQL"),e(a)]),s(" 或图数据库如 "),n("a",x,[s("Neo4j"),e(a)]),s("。")]),N,n("p",null,[s("我们不能在同一台机器上满足所有用户，我们需要通过 "),S,s(),n("a",j,[s("拆分"),e(a)]),s(" 用户并且通过 "),L,s(" 访问。")]),n("ul",null,[n("li",null,[I,s(" 向 "),B,s(" 发送请求，"),P,s(" 作为 "),n("a",Q,[s("反向代理"),e(a)])]),A]),E,n("p",null,[s("我们用的是公共的 "),n("a",R,[z,e(a)]),s("：")]),C,n("p",null,[s("内部通信使用 "),n("a",F,[s("远端过程调用"),e(a)]),s("。")]),G,T,W,D,n("p",null,[s("你将要做的是：1) "),M,s("， 2) 瓶颈 "),V,s("， 3) 当评估可选和折中方案时定位瓶颈，4) 重复。以 "),e(p,{to:"/code/system-design/system-design-primer/scaling_aws.html"},{default:c(()=>[s("在 AWS 上设计支持百万级到千万级用户的系统")]),_:1}),s(" 为参考迭代地扩展最初设计。")]),U,X,n("p",null,[H,s("，以下网址链接到 "),n("a",J,[s("系统设计主题"),e(a)]),s(" 相关的主流方案、折中方案和替代方案。")]),n("ul",null,[n("li",null,[n("a",$,[s("DNS"),e(a)])]),n("li",null,[n("a",K,[s("负载均衡"),e(a)])]),n("li",null,[n("a",O,[s("横向扩展"),e(a)])]),n("li",null,[n("a",Y,[s("Web 服务器（反向代理）"),e(a)])]),n("li",null,[n("a",Z,[s("API 服务器（应用层）"),e(a)])]),n("li",null,[n("a",nn,[s("缓存"),e(a)])]),n("li",null,[n("a",sn,[s("一致性模式"),e(a)])]),n("li",null,[n("a",en,[s("可用性模式"),e(a)])])]),an,tn,n("ul",null,[on,pn,n("li",null,[s("在同一台 "),rn,s(" 上托管批处理同一批朋友查找减少机器跳转 "),n("ul",null,[n("li",null,[s("通过地理位置 "),n("a",ln,[s("拆分"),e(a)]),s(),cn,s(" 来进一步优化，因为朋友通常住得都比较近")])])]),un,n("li",null,[s("从有庞大朋友圈的人开始找起，这样更有可能减小当前用户和搜索目标之间的 "),n("a",dn,[s("离散度数"),e(a)])]),kn,n("li",null,[s("使用类似 "),n("a",hn,[s("Neo4j"),e(a)]),s(" 的 "),mn,s(" 或图特定查询语法，例如 "),n("a",_n,[s("GraphQL"),e(a)]),s("（如果没有禁止使用 "),vn,s(" 的限制的话）")])]),bn,gn,fn,n("ul",null,[n("li",null,[n("a",yn,[s("读取副本"),e(a)])]),n("li",null,[n("a",wn,[s("集合"),e(a)])]),n("li",null,[n("a",qn,[s("分区"),e(a)])]),n("li",null,[n("a",xn,[s("反规范化"),e(a)])]),n("li",null,[n("a",Nn,[s("SQL 调优"),e(a)])])]),Sn,n("ul",null,[n("li",null,[n("a",jn,[s("键值存储"),e(a)])]),n("li",null,[n("a",Ln,[s("文档存储"),e(a)])]),n("li",null,[n("a",In,[s("宽表存储"),e(a)])]),n("li",null,[n("a",Bn,[s("图数据库"),e(a)])]),n("li",null,[n("a",Pn,[s("SQL vs NoSQL"),e(a)])])]),Qn,n("ul",null,[n("li",null,[s("缓存到哪里 "),n("ul",null,[n("li",null,[n("a",An,[s("客户端缓存"),e(a)])]),n("li",null,[n("a",En,[s("CDN 缓存"),e(a)])]),n("li",null,[n("a",Rn,[s("Web 服务缓存"),e(a)])]),n("li",null,[n("a",zn,[s("数据库缓存"),e(a)])]),n("li",null,[n("a",Cn,[s("应用缓存"),e(a)])])])]),n("li",null,[s("缓存什么 "),n("ul",null,[n("li",null,[n("a",Fn,[s("数据库请求层缓存"),e(a)])]),n("li",null,[n("a",Gn,[s("对象层缓存"),e(a)])])])]),n("li",null,[s("何时更新缓存 "),n("ul",null,[n("li",null,[n("a",Tn,[s("预留缓存"),e(a)])]),n("li",null,[n("a",Wn,[s("完全写入"),e(a)])]),n("li",null,[n("a",Dn,[s("延迟写 (写回)"),e(a)])]),n("li",null,[n("a",Mn,[s("事先更新"),e(a)])])])])]),Vn,n("ul",null,[n("li",null,[n("a",Un,[s("消息队列"),e(a)])]),n("li",null,[n("a",Xn,[s("任务队列"),e(a)])]),n("li",null,[n("a",Hn,[s("回退压力"),e(a)])]),n("li",null,[n("a",Jn,[s("微服务"),e(a)])])]),$n,n("ul",null,[n("li",null,[s("关于折中方案的讨论: "),n("ul",null,[n("li",null,[s("客户端的外部通讯 - "),n("a",Kn,[s("遵循 REST 的 HTTP APIs"),e(a)])]),n("li",null,[s("内部通讯 - "),n("a",On,[s("RPC"),e(a)])])])]),n("li",null,[n("a",Yn,[s("服务探索"),e(a)])])]),Zn,n("p",null,[s("参考 "),n("a",ns,[s("安全章节"),e(a)])]),ss,n("p",null,[s("查阅 "),n("a",es,[s("每个程序员必懂的延迟数字"),e(a)])]),as,ts])}const cs=i(u,[["render",os],["__file","social_graph.html.vue"]]);export{cs as default};
