import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as d,b as n,e as t,d as s,w as p,a as e}from"./app-8cf4862e.js";const r={},u=e('<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>整理了一些学习 CSS 时的笔记。</p></div><h2 id="css-布局之-position-篇" tabindex="-1"><a class="header-anchor" href="#css-布局之-position-篇" aria-hidden="true">#</a> CSS 布局之 position 篇 <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>position</code> 属性用来描述 HTML 元素如何在文档流中定位。</p></div><h3 id="position-属性" tabindex="-1"><a class="header-anchor" href="#position-属性" aria-hidden="true">#</a> position 属性</h3><p>position 属性的值有：</p>',5),g=n("li",null,"static：（默认值）根据正常文档流放置。",-1),k=n("li",null,[t("relative：基于正常文档流的位置使用 "),n("code",null,"top"),t(", "),n("code",null,"right"),t(", "),n("code",null,"bottom"),t(", "),n("code",null,"left"),t(" 属性进行偏移。")],-1),f=n("strong",null,"移出文档流",-1),m=n("mark",null,"包含块",-1),v=n("code",null,"top",-1),h=n("code",null,"right",-1),b=n("code",null,"bottom",-1),x=n("code",null,"left",-1),y=e("<li>fixed：将元素<strong>移出文档流</strong>，在<strong>整个视图区域</strong>内使用 <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 属性进行放置。</li><li>sticky：基于正常文档流的位置放置，并且在滚动屏幕时能粘在画面内，使用 <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 属性进行偏移。</li>",2),q={class:"hint-container warning"},_=n("p",{class:"hint-container-title"},"巨大的坑",-1),w=n("strong",null,"包含块",-1),S=e(`<h3 id="指定位置" tabindex="-1"><a class="header-anchor" href="#指定位置" aria-hidden="true">#</a> 指定位置</h3><p><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 属性用于指定元素的最终位置。</p><div class="hint-container info"><p class="hint-container-title">这里拿 absolute 模式来举例。</p></div><ul><li>top: 元素上边界距离包含块的相对距离。</li><li>right: 元素右边界距离包含块的相对距离。</li><li>bottom: 元素下边界距离包含块的相对距离。</li><li>left: 元素左边界距离包含块的相对距离。</li></ul><iframe class="interactive is-default-height" height="370px" width="100%" src="https://interactive-examples.mdn.mozilla.net/pages/css/position.html" title="MDN Web Docs Interactive Example" loading="lazy"></iframe><h2 id="css-布局之-flexbox-篇-基础" tabindex="-1"><a class="header-anchor" href="#css-布局之-flexbox-篇-基础" aria-hidden="true">#</a> CSS 布局之 Flexbox 篇（基础） <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>Flexbox 是Flexible Box Module. 一种布局模型，可以轻松控制 html 元素 之间的空间分布和对齐方式。</p><p>Flexbox 控制一次仅在一维（行或列）中的定位。对于二维控件，CSS Grid Layout 应运而生。</p><p>给定以下模板：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-7<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-9<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box box-10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述 div 的默认行为，尊重正常的 html 文档流，是从上到下、从左到右呈现并占据整个正文宽度，因为它的display属性默认为block.</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/4USqRq.jpg" alt="4USqRq" height="300" tabindex="0" loading="lazy"><figcaption>4USqRq</figcaption></figure><h3 id="弹性item" tabindex="-1"><a class="header-anchor" href="#弹性item" aria-hidden="true">#</a> 弹性item</h3><p>当<code>display: flex</code>应用于<code>.container div</code> 时，所有直接子 <code>div</code> 变为<code>flex-items</code>，并获得新的行为：</p><ul><li>它们将显示在一行中，因为 <code>flex-direction</code> 默认为 <code>row</code></li><li>它们将从左到右显示</li><li>项目<strong>不会拉伸</strong>以适应整个宽度（主轴），但它们会收缩以做到这一点。<br><img src="http://timpcfan-site.cdn.bcebos.com/imgs/AsUQoe.gif" alt="AsUQoe" loading="lazy"></li><li>项目<strong>拉伸</strong>以适应交叉轴（本例中的高度）。</li><li>如果物品有不同的高度，它们将伸展到最高的一个高度</li><li>flex-basis默认为auto（项目宽度将由其内容设置）</li><li>flex-wrap默认为nowrap（如果容器的宽度不足以容纳物品，它们不会包装，而是会溢出）</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在主轴上收缩（收缩成自身宽度），在交叉轴上拉伸（拉伸成最高那个）。</p></div><h3 id="弹性容器" tabindex="-1"><a class="header-anchor" href="#弹性容器" aria-hidden="true">#</a> 弹性容器</h3><ul><li>display: flex使容器扩展可用的整个宽度。与flex相反display: inline-flex，它使容器折叠到内容的宽度。</li></ul><h3 id="flex-direction" tabindex="-1"><a class="header-anchor" href="#flex-direction" aria-hidden="true">#</a> flex-direction</h3><p>一旦声明为 flex 容器，该元素就可以被认为是两个轴。主轴，由flex-direction属性定义。和交叉轴，它垂直于第一个。</p><p>该属性有四个值flex-direction：<code>row</code>、 <code>column</code>、<code>row-reverse</code>、 <code>columncolumn-reverse</code></p><p>默认值为row，它设置主轴水平，从左到右，横轴垂直截取它，从上到下。类似地，该column值设置垂直轴，从上到下，交叉轴从左到右。两个选项的reverse属性都将主轴反转 180°。交叉轴保持不变。</p><p>这些值的弹性项目行为可以在下面观察到：</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/oibRlg.gif" alt="oibRlg" tabindex="0" loading="lazy"><figcaption>oibRlg</figcaption></figure><h3 id="flex-wrap" tabindex="-1"><a class="header-anchor" href="#flex-wrap" aria-hidden="true">#</a> flex-wrap</h3><p>flex-wrap是当容器中的空间不足以容纳所有弹性项目时处理弹性项目的属性。</p><p>默认情况下flex-wrap设置为nowrap，这意味着如果容器不能以原始宽度容纳一行中的项目，它们将缩小以适应。如果由于某种原因它们无法收缩，那么它们会溢出容器。</p><p>通过为项目设置 300px 宽度，该nowrap选项会输出以下结果：</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/yuHKj4.png" alt="yuHKj4" height="300" tabindex="0" loading="lazy"><figcaption>yuHKj4</figcaption></figure><p>其中，每个项目都缩小到大约 70px 以适应容器。</p><p>当属性更新为 时wrap，项目的宽度现在实际上将具有其原始值 300 像素。当第一行的宽度不足以容纳 300 像素时，该项目不会溢出容器，而是换行到新行。每一行都应该被认为是一个单独的弹性容器。一个容器中的空间分布不会影响相邻的其他容器。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/HqmnPV.png" alt="HqmnPV" height="300" tabindex="0" loading="lazy"><figcaption>HqmnPV</figcaption></figure><p>另一种选择是wrap-reverse，它反转交叉轴。flex-direction由属性从上到下设置，wrap-reverse将其转换为从下到上。</p><h3 id="弹性流" tabindex="-1"><a class="header-anchor" href="#弹性流" aria-hidden="true">#</a> 弹性流</h3><p><code>flex-direction</code>并且<code>flex-wrap</code>可以在单个属性中声明：<code>flex-flow: [direction] [wrap]</code></p><h3 id="对齐" tabindex="-1"><a class="header-anchor" href="#对齐" aria-hidden="true">#</a> 对齐</h3><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/invnoF.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在 Flexbox 中，项目沿轴的对齐和空间分布可以通过四个属性来控制 ：</p><ul><li>justify-content：对齐主轴上的所有项目</li><li>align-items：对齐交叉轴上的所有项目</li><li>align-self：在交叉轴上对齐单个项目</li><li>align-content: 控制交叉轴上弯曲线之间的空间</li></ul><h3 id="弹性盒尺寸" tabindex="-1"><a class="header-anchor" href="#弹性盒尺寸" aria-hidden="true">#</a> 弹性盒尺寸</h3><p>项目的大小和灵活性可以通过三个属性来控制flex-grow、flex-shrink和flex-basis。这三个都作用于主轴。</p><ul><li>flex-grow: 如果有多余的空间，每个项目应该如何放大</li><li>flex-shrink: 如果没有足够的空间，每个项目应该如何减少</li><li>flex-basis: 在设置上面两个属性之前，项目应该是什么大小</li></ul><h4 id="flex-grow-弹性成长" tabindex="-1"><a class="header-anchor" href="#flex-grow-弹性成长" aria-hidden="true">#</a> flex-grow 弹性成长</h4><p>此属性的flex grow factor设置是处理项目大小相对于彼此的比率。</p><p>默认值为 0，表示如果有可用空间，则将其放在最后一项之后。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/55rRLZ.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在上面的示例中，direction设置为row，并且每个弹性项目width都设置为60px。由于容器很980px宽，因此有680px可用空间。该空间称为positive free space。</p><p>通过设置flex-grow为1，正的可用空间量在弹性项目之间平均分配。每个项目的宽度将增加136px，总计196px。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/5trUDz.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过<code>flex-grow: 2</code>应用于第三个项目，它获得的可用正可用空间量是<code>286px</code>其余项目的两倍，<code>173px</code>。</p><p>下图显示了<code>flex-grow</code>属性设置为其内容值的项目。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/1ftKa2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="flex-shrink-弹性收缩" tabindex="-1"><a class="header-anchor" href="#flex-shrink-弹性收缩" aria-hidden="true">#</a> flex-shrink 弹性收缩</h4><p>flex-shrink处理项目大小，当没有足够的可用空间将它们全部放入容器中时。因此，它negative free space通过缩小项目来划分项目。</p><p>下一张图片显示了980px装有五个300px宽物品的容器。由于没有空间容纳1500px所需，默认flex shrink factor值1使每个项目均匀收缩到196px。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/Y3Pm8q.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过<code>flex-shrink: 2</code>为第三项设置比率，它会比其他项小两倍。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/Wcu0xX.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>本节中的最后一张图片显示了将其内容值保存为 flex 收缩率的每个项目。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/uAEXro.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="flex-basis-弹性基础" tabindex="-1"><a class="header-anchor" href="#flex-basis-弹性基础" aria-hidden="true">#</a> flex-basis 弹性基础</h4><p>flex-basis是在实际设置可用空间之前检查每个项目应具有的大小的属性。默认值为auto，并且项目宽度由width属性显式设置，或者采用内容宽度。它还接受像素值。</p><p>下面的 gif 显示了一个800px宽容器和五个设置为flex-basis: 160px. 这告诉浏览器：理想情况下，有足够的空间来放置所有项目，尊重它们的160px宽度，并且没有正/负的可用空间。如果没有足够的空间，由于flex-shrink默认为1，所有项目都被均匀收缩。如果有多余的空间，则flex-grow默认为0，并且空白空间位于最后一项之后。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/SKURrp.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下一个 gif 显示项目 1 设置为<code>flex-shrink: 10</code>，项目 4 设置为<code>flex-grow: 10</code>。对于负的可用空间，项目 1 的宽度减少了 10 倍。对于正的可用空间，项目 4 的宽度是其他项目的 10 倍。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/B184OW.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>flex-basis</code>也接受 value <code>content</code>，无论<code>width</code>是否设置，计算可用空间的宽度都是项目的内容。如果您不想考虑该计算的项目宽度，请将基础设置为<code>0</code>。</p><h4 id="flex-弹性" tabindex="-1"><a class="header-anchor" href="#flex-弹性" aria-hidden="true">#</a> flex 弹性</h4><p>flex 是 <code>flex-grow</code>, <code>flex-shrink</code>, <code>flex-basis</code> 的简写.</p><p>它接受以下预定义值：</p><ul><li><code>initial</code>: 重置为 flexbox 默认值，与 <code>flex: 0 1 auto</code> 相同</li><li><code>auto</code>: flex-items 可以根据需要增长/缩小，与 <code>flex: 1 1 auto</code> 相同</li><li><code>none</code>: 使项目不灵活，与 <code>flex: 0 0 auto</code> 相同</li><li><code>flex: 1</code>: flex-items 具有增长/收缩的能力并且flex-basis设置为零，与 <code>flex: 1 1 0</code> 相同</li></ul><h2 id="css-布局之-flexbox-篇-扩展" tabindex="-1"><a class="header-anchor" href="#css-布局之-flexbox-篇-扩展" aria-hidden="true">#</a> CSS 布局之 Flexbox 篇（扩展） <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></h2><h3 id="几个例子" tabindex="-1"><a class="header-anchor" href="#几个例子" aria-hidden="true">#</a> 几个例子</h3><h4 id="例子-居中对齐" tabindex="-1"><a class="header-anchor" href="#例子-居中对齐" aria-hidden="true">#</a> 例子：居中对齐</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.CenterMe</span> <span class="token punctuation">{</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> indigo<span class="token punctuation">;</span>
	<span class="token property">color</span><span class="token punctuation">:</span> #ebebeb<span class="token punctuation">;</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>
	<span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
	<span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 沿着交叉轴对齐 */</span>
	<span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 沿着主轴对齐 */</span>
<span class="token punctuation">}</span>

&lt;div class=<span class="token string">&quot;CenterMe&quot;</span>&gt;Hello<span class="token punctuation">,</span> I&#39;m centered with Flexbox!&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/K3PDPP.png" alt="K3PDPP" tabindex="0" loading="lazy"><figcaption>K3PDPP</figcaption></figure><h4 id="例子-偏移" tabindex="-1"><a class="header-anchor" href="#例子-偏移" aria-hidden="true">#</a> 例子：偏移</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.LastItem,
.ListItem</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #ebebeb<span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.ListItem</span> <span class="token punctuation">{</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.LastItem</span> <span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token comment">/* 用上该侧所有可用的外边距 */</span>
<span class="token punctuation">}</span>

&lt;div class=<span class="token string">&quot;MenuWrap&quot;</span>&gt;
  &lt;a href=<span class="token string">&quot;#&quot;</span> class=<span class="token string">&quot;ListItem&quot;</span>&gt;Home&lt;/a&gt;
  &lt;a href=<span class="token string">&quot;#&quot;</span> class=<span class="token string">&quot;ListItem&quot;</span>&gt;About Us&lt;/a&gt;
  &lt;a href=<span class="token string">&quot;#&quot;</span> class=<span class="token string">&quot;ListItem&quot;</span>&gt;Products&lt;/a&gt;
  &lt;a href=<span class="token string">&quot;#&quot;</span> class=<span class="token string">&quot;ListItem&quot;</span>&gt;Policy&lt;/a&gt;
  &lt;a href=<span class="token string">&quot;#&quot;</span> class=<span class="token string">&quot;LastItem&quot;</span>&gt;Contact Us&lt;/a&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/9jnlas.png" alt="9jnlas" tabindex="0" loading="lazy"><figcaption>9jnlas</figcaption></figure><h4 id="例子-反序" tabindex="-1"><a class="header-anchor" href="#例子-反序" aria-hidden="true">#</a> 例子：反序</h4><p>让所有项反序排列</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>此外还有 column-reverse 为垂直反序。</p></div><h3 id="flexbox的对齐" tabindex="-1"><a class="header-anchor" href="#flexbox的对齐" aria-hidden="true">#</a> flexbox的对齐</h3><p>关于Flexbox的对齐，最重要的是理解坐标轴。有两个轴，“主轴”和“交叉轴”。这两个轴代表什么取决于Flexbox排列的方向。比如，如果将Flexbox的方向设置为<code>row</code>，则主轴就是横轴， 而交叉轴就是纵轴。</p><p>反之，如果Flexbox的方向是<code>column</code>，则主轴就是纵轴，而交叉轴为横轴。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/OioNsa.png" alt="OioNsa" tabindex="0" loading="lazy"><figcaption>OioNsa</figcaption></figure><h4 id="沿着交叉轴对齐" tabindex="-1"><a class="header-anchor" href="#沿着交叉轴对齐" aria-hidden="true">#</a> 沿着交叉轴对齐</h4><p>设置的属性：</p><ul><li>align-items：设置容器内所有item沿交叉轴对齐的方式（对容器内元素）</li><li>align-self：针对内部元素，设置特定的沿交叉轴对齐的方式（对自己）</li></ul><p>对齐的方式：</p><ul><li>flex-start: 把元素的对齐设置为flex-start，可以让元素从Flexbox父元素的起始边 开始。</li><li>flex-end: 把元素的对齐设置为flex-end，会沿Flexbox父元素的末尾对齐该元素。</li><li>center: 把元素放在Flexbox元素的中间。</li><li>baseline: 让Flexbox元素中的所有项沿基线对齐。</li><li>stretch: 让Flexbox中的所有项(没交叉轴)拉伸至与父元素一样大</li></ul><h4 id="沿着主轴对齐" tabindex="-1"><a class="header-anchor" href="#沿着主轴对齐" aria-hidden="true">#</a> 沿着主轴对齐</h4><p>设置的属性：</p><ul><li>justify-content：设置容器内所有item沿主轴的对齐方式</li></ul><p>对齐的方式：</p><ul><li>flex-start</li><li>flex-end</li><li>center</li><li>space-between：设置如何处理空白，将空白分配到元素之间</li><li>space-around：设置如何处理空白，将空白分配到元素两边</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>&lt;div class=<span class="token string">&quot;FlexWrapper&quot;</span>&gt;
	&lt;div class=<span class="token string">&quot;FlexInner&quot;</span>&gt;I am content in the inner Flexbox 1.&lt;/div&gt;
	&lt;div class=<span class="token string">&quot;FlexInner&quot;</span>&gt;I am content in the inner Flexbox 2.&lt;/div&gt;
	&lt;div class=<span class="token string">&quot;FlexInner&quot;</span>&gt;I am content in the inner Flexbox 3.&lt;/div&gt;
&lt;/div&gt;
<span class="token comment">/* 再看以下CSS。我们把每个内部元素(FlexInner)的宽度都设置为25%，包含它们的容器
Flexbox(FlexWrapper)的宽度为100% */</span>
<span class="token selector">.FlexWrapper</span> <span class="token punctuation">{</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> indigo<span class="token punctuation">;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
	<span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>
	<span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
	<span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.FlexInner</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #34005B<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/Iqs9fg.png" alt="Iqs9fg" tabindex="0" loading="lazy"><figcaption>Iqs9fg</figcaption></figure><h3 id="flex属性" tabindex="-1"><a class="header-anchor" href="#flex属性" aria-hidden="true">#</a> flex属性</h3><p>前面已经给伸缩项(flex-item)定义过宽度了。除了width，还可以通过flex属性来定义宽 度，或者叫“伸缩性”(flexiness)。再看另一个例子，同样的标记，但CSS有所不同:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.FlexInner</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ebebeb<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #34005B<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
	<span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,103),z={href:"https://www.w3.org/TR/css-flexbox-1/",target:"_blank",rel:"noopener noreferrer"},C=e(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">flex</span><span class="token punctuation">:</span> 1       1     100px
      伸展    收缩    基准
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于伸缩项，如果flex属性存在(且浏览器支持)，<strong>则使用它的值控制元素的大小，忽略宽度和高度值的设置</strong>，即使它们的声明位于flex声明之后，也会被忽略。下面分别看看这三个 属性。</p><ul><li>flex-grow(传给flex的第一个值)是相对于其他伸缩项，当前伸缩项在空间允许的情况下可以伸展的量。</li><li>flex-shrink是在空间不够的情况下，当前伸缩项相对于其他伸缩项可以收缩的量。</li><li>flex-basis(传给flex的最后一个值)是伸缩项伸缩的基准值。</li></ul><p>虽然只写<code>flex: 1</code>也没问题，但还是建议大家把三个值写全。这样才能更清楚地表明你想干什么。比如<code>flex: 1 2 auto</code>的意思是在有空间的情况下可以伸展1部分，在空间不足时可以收缩1部分，而<strong>基准大小是内容的固有宽度</strong>(即不伸缩的情况下内容的大小)。<br> 再试一个:<code>flex: 0 0 50px</code>的意思是，这个伸缩项既不伸也不缩，基准为50像素(即无论是否存在自由空间，都是50像素)。那么<code>flex: 2 0 50%</code>呢?意思就是会多占用两个可用空间， 不收缩，基准为50%。但愿这几个例子能帮大家理解flex属性。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>将flex-shrink的值设置为0，flex-basis实际上就相当于最小宽度。</p></div><h2 id="css-布局之-grid-篇" tabindex="-1"><a class="header-anchor" href="#css-布局之-grid-篇" aria-hidden="true">#</a> CSS 布局之 Grid 篇 <sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></h2><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/GwfRmw.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个网格通常具有许多的<strong>列（column）<strong>与</strong>行（row）</strong>，以及行与行、列与列之间的间隙，这个间隙一般被称为<strong>沟槽（gutter）</strong>。</p><h3 id="定义网格" tabindex="-1"><a class="header-anchor" href="#定义网格" aria-hidden="true">#</a> 定义网格</h3><p>在一个父容器中使用：<code>display: grid;</code> ，将这个容器改为网格布局。</p><ul><li>初始状态：只有一列的网格，你的子项还是会像正常布局流那样从上往下排布。</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 200px 200px 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>grid-template-columns</code> 来定义多个列，每个参数代表一个列的宽度。可以使用 <code>fr</code> 这个单位来灵活定义网格的行与列的大小。这个单位表示了<strong>可用空间</strong>的一个比例。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 1fr 1fr<span class="token punctuation">;</span>          <span class="token comment">/* 三个列，每个列宽度相等 */</span>
<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 400px 1fr 1fr<span class="token punctuation">;</span>        <span class="token comment">/* 三个列，后面两个列的宽度为：(总宽度-400px)/2 */</span>
<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* 三个列，可以使用repeat函数来重复定义 */</span>
<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> 1fr<span class="token punctuation">,</span> 2fr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 1fr 2fr 1fr 2fr */</span>
<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* auto-fill 表示填满屏幕，minmax限制大小 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>同样的，使用 <code>grid-template-rows</code> 可以定义多个行 ，每个参数代表一个行的高度。</p></div><h4 id="网格间隙" tabindex="-1"><a class="header-anchor" href="#网格间隙" aria-hidden="true">#</a> 网格间隙</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token comment">/* 标准 */</span>
<span class="token property">grid-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token comment">/* 旧 */</span>
<span class="token property">grid-row-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token comment">/* 行间距 */</span>
<span class="token property">grid-column-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token comment">/* 列间距 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="显式网格与隐式网格" tabindex="-1"><a class="header-anchor" href="#显式网格与隐式网格" aria-hidden="true">#</a> 显式网格与隐式网格</h4><p>使用 <code>grid-template-columns</code> 与 <code>grid-template-rows</code> 定义的网络称为显式网格，而多余的内容则会继续往下填充到新的行的格子内，这些格子被称为隐式网格。</p><p>隐式网格的默认行/列大小是参数<code>auto</code> ，大小会根据放入的内容自动调整。也可以使用 <code>[grid-auto-rows](https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-auto-rows)</code>和<code>[grid-auto-columns](https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-auto-columns)</code>属性手动设定隐式网格的大小。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">grid-auto-rows</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">grid-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元素放置" tabindex="-1"><a class="header-anchor" href="#元素放置" aria-hidden="true">#</a> 元素放置</h3><h4 id="基于线的元素放置" tabindex="-1"><a class="header-anchor" href="#基于线的元素放置" aria-hidden="true">#</a> 基于线的元素放置</h4><p>定义完网格之后，每行每列的边界（网格线的边缘）都有一个索引，可以使用这些线来定位放置元素。</p><figure><img src="http://timpcfan-site.cdn.bcebos.com/imgs/xHBtux.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">grid-column-start</span><span class="token punctuation">:</span> 1  <span class="token comment">/* 列的开始边界 */</span>
<span class="token property">grid-column-end</span><span class="token punctuation">:</span> 3  <span class="token comment">/* 列的结束边界，因此 1 / 3 表示 1、2列 */</span>
<span class="token property">grid-row-start</span><span class="token punctuation">:</span> 2
<span class="token property">grid-row-end</span><span class="token punctuation">:</span> 3
<span class="token comment">/* 或者 */</span>
<span class="token property">grid-column</span><span class="token punctuation">:</span> 1 / 3
<span class="token property">grid-row</span><span class="token punctuation">:</span> 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>可以使用负数来进行倒数，但对于隐式网格来说 -1 不一定代表最后一条分界线。</p></div><h4 id="使用-grid-template-areas-属性放置元素" tabindex="-1"><a class="header-anchor" href="#使用-grid-template-areas-属性放置元素" aria-hidden="true">#</a> 使用 grid-template-areas 属性放置元素</h4><p>另一种往网格放元素的方式是用<code>[grid-template-areas](https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-template-areas)</code>属性，并且你要命名一些元素并在属性中使用这些名字作为一个区域。</p><p>将之前基于线的元素放置代码删除（或者重新下载一份新的文件），然后加入以下 CSS 规则：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>
      <span class="token string">&quot;header header&quot;</span>
      <span class="token string">&quot;sidebar content&quot;</span>
      <span class="token string">&quot;footer footer&quot;</span><span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 3fr<span class="token punctuation">;</span>
  <span class="token property">grid-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">header</span> <span class="token punctuation">{</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">article</span> <span class="token punctuation">{</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">aside</span> <span class="token punctuation">{</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> sidebar<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">footer</span> <span class="token punctuation">{</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> footer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>grid-template-areas</code>属性的使用规则如下：</p><ul><li>你需要填满网格的每个格子</li><li>对于某个横跨多个格子的元素，重复写上那个元素<code>grid-area</code>属性定义的区域名字</li><li>所有名字只能出现在一个连续的区域，不能在不同的位置出现</li><li>一个连续的区域必须是一个矩形</li><li>使用<code>.</code>符号，让一个格子留空</li></ul><p>你可以在文件中尽情发挥你的想象来测试各种网格排版，比如把页脚放在内容之下，或者把侧边栏一直延伸到最底。这种直观的元素放置方式很棒，你在 CSS 中看到的就是实际会出现的排版效果。</p><h2 id="css-选择器" tabindex="-1"><a class="header-anchor" href="#css-选择器" aria-hidden="true">#</a> CSS 选择器</h2><table><thead><tr><th>选择器</th><th>示例</th><th>示例说明</th><th>CSS</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选择所有class=&quot;intro&quot;的元素</td><td>1</td></tr><tr><td>#id</td><td>#firstname</td><td>选择所有id=&quot;firstname&quot;的元素</td><td>1</td></tr><tr><td>*</td><td>*</td><td>选择所有元素</td><td>2</td></tr><tr><td>element</td><td>p</td><td>选择所有<code>&lt;p&gt;</code>元素</td><td>1</td></tr><tr><td>element,element</td><td>div,p</td><td>选择所有<code>&lt;div&gt;</code>元素和<code>&lt;p&gt;</code>元素</td><td>1</td></tr><tr><td>element element</td><td>div p</td><td>选择<code>&lt;div&gt;</code>元素内的所有<code>&lt;p&gt;</code>元素</td><td>1</td></tr><tr><td>element&gt;element</td><td>div&gt;p</td><td>选择所有父级是 <code>&lt;div&gt;</code> 元素的 <code>&lt;p&gt;</code> 元素（div的直接儿子，不包含孙子）</td><td>2</td></tr><tr><td>element+element</td><td>div+p</td><td>选择所有紧跟在 <code>&lt;div&gt;</code> 元素之后的第一个 <code>&lt;p&gt;</code> 元素</td><td>2</td></tr><tr><td>[attribute]</td><td>[target]</td><td>选择所有带有target属性元素</td><td>2</td></tr><tr><td>[attribute=value]</td><td>[target=-blank]</td><td>选择所有使用target=&quot;-blank&quot;的元素</td><td>2</td></tr><tr><td>[attribute~=value]</td><td>[title~=flower]</td><td>选择标题属性包含单词&quot;flower&quot;的所有元素</td><td>2</td></tr><tr><td>[attribute</td><td>=language]</td><td>[lang</td><td>=en]</td></tr><tr><td>:link</td><td>a:link</td><td>选择所有未访问链接</td><td>1</td></tr><tr><td>:visited</td><td>a:visited</td><td>选择所有访问过的链接</td><td>1</td></tr><tr><td>:active</td><td>a:active</td><td>选择活动链接</td><td>1</td></tr><tr><td>:hover</td><td>a:hover</td><td>选择鼠标在链接上面时</td><td>1</td></tr><tr><td>:focus</td><td>input:focus</td><td>选择具有焦点的输入元素</td><td>2</td></tr><tr><td>:first-letter</td><td>p:first-letter</td><td>选择每一个<code>&lt;p&gt;</code>元素的第一个字母</td><td>1</td></tr><tr><td>:first-line</td><td>p:first-line</td><td>选择每一个<code>&lt;p&gt;</code>元素的第一行</td><td>1</td></tr><tr><td>:first-child</td><td>p:first-child</td><td>指定只有当<code>&lt;p&gt;</code>元素是其父级的第一个子级的样式。</td><td>2</td></tr><tr><td>:before</td><td>p:before</td><td>在每个<code>&lt;p&gt;</code>元素之前插入内容</td><td>2</td></tr><tr><td>:after</td><td>p:after</td><td>在每个<code>&lt;p&gt;</code>元素之后插入内容</td><td>2</td></tr><tr><td>:lang(language)</td><td>p:lang(it)</td><td>选择一个lang属性的起始值=&quot;it&quot;的所有<code>&lt;p&gt;</code>元素</td><td>2</td></tr><tr><td>element1~element2</td><td>p~ul</td><td>选择p元素之后的每一个ul元素</td><td>3</td></tr><tr><td>[attribute^=value]</td><td>a[src^=&quot;https&quot;]</td><td>选择每一个src属性的值以&quot;https&quot;开头的元素</td><td>3</td></tr><tr><td>[attribute$=value]</td><td>a[src$=&quot;.pdf&quot;]</td><td>选择每一个src属性的值以&quot;.pdf&quot;结尾的元素</td><td>3</td></tr><tr><td>[attribute*=value]</td><td>a[src*=&quot;runoob&quot;]</td><td>选择每一个src属性的值包含子字符串&quot;runoob&quot;的元素</td><td>3</td></tr><tr><td>:first-of-type</td><td>p:first-of-type</td><td>选择每个p元素是其父级的第一个p元素</td><td>3</td></tr><tr><td>:last-of-type</td><td>p:last-of-type</td><td>选择每个p元素是其父级的最后一个p元素</td><td>3</td></tr><tr><td>:only-of-type</td><td>p:only-of-type</td><td>选择每个p元素是其父级的唯一p元素</td><td>3</td></tr><tr><td>:only-child</td><td>p:only-child</td><td>选择每个p元素是其父级的唯一子元素</td><td>3</td></tr><tr><td>:nth-child(n)</td><td>p:nth-child(2)</td><td>选择每个p元素是其父级的第二个子元素</td><td>3</td></tr><tr><td>:nth-last-child(n)</td><td>p:nth-last-child(2)</td><td>选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td><td>3</td></tr><tr><td>:nth-of-type(n)</td><td>p:nth-of-type(2)</td><td>选择每个p元素是其父级的第二个p元素</td><td>3</td></tr><tr><td>:nth-last-of-type(n)</td><td>p:nth-last-of-type(2)</td><td>选择每个p元素的是其父级的第二个p元素，从最后一个子项计数</td><td>3</td></tr><tr><td>:last-child</td><td>p:last-child</td><td>选择每个p元素是其父级的最后一个子级。</td><td>3</td></tr><tr><td>:root</td><td>:root</td><td>选择文档的根元素</td><td>3</td></tr><tr><td>:empty</td><td>p:empty</td><td>选择每个没有任何子级的p元素（包括文本节点）</td><td>3</td></tr><tr><td>:target</td><td>#news:target</td><td>选择当前活动的#news元素（包含该锚名称的点击的URL）</td><td>3</td></tr><tr><td>:enabled</td><td>input:enabled</td><td>选择每一个已启用的输入元素</td><td>3</td></tr><tr><td>:disabled</td><td>input:disabled</td><td>选择每一个禁用的输入元素</td><td>3</td></tr><tr><td>:checked</td><td>input:checked</td><td>选择每个选中的输入元素</td><td>3</td></tr><tr><td>:not(selector)</td><td>:not(p)</td><td>选择每个并非p元素的元素</td><td>3</td></tr><tr><td>::selection</td><td>::selection</td><td>匹配元素中被用户选中或处于高亮状态的部分</td><td>3</td></tr><tr><td>:out-of-range</td><td>:out-of-range</td><td>匹配值在指定区间之外的input元素</td><td>3</td></tr><tr><td>:in-range</td><td>:in-range</td><td>匹配值在指定区间之内的input元素</td><td>3</td></tr><tr><td>:read-write</td><td>:read-write</td><td>用于匹配可读及可写的元素</td><td>3</td></tr><tr><td>:read-only</td><td>:read-only</td><td>用于匹配设置 &quot;readonly&quot;（只读） 属性的元素</td><td>3</td></tr><tr><td>:optional</td><td>:optional</td><td>用于匹配可选的输入元素</td><td>3</td></tr><tr><td>:required</td><td>:required</td><td>用于匹配设置了 &quot;required&quot; 属性的元素</td><td>3</td></tr><tr><td>:valid</td><td>:valid</td><td>用于匹配输入值为合法的元素</td><td>3</td></tr><tr><td>:invalid</td><td>:invalid</td><td>用于匹配输入值为非法的元素</td><td>3</td></tr></tbody></table><hr class="footnotes-sep">`,37),F={class:"footnotes"},I={class:"footnotes-list"},L={id:"footnote1",class:"footnote-item"},N={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/position",target:"_blank",rel:"noopener noreferrer"},P=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),R={id:"footnote2",class:"footnote-item"},W={href:"https://blog.csdn.net/allway2/article/details/125083126",target:"_blank",rel:"noopener noreferrer"},j=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),D={id:"footnote3",class:"footnote-item"},U={href:"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox",target:"_blank",rel:"noopener noreferrer"},B=n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1),H={id:"footnote4",class:"footnote-item"},M={href:"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Grids#flexbox_%E7%BD%91%E6%A0%BC",target:"_blank",rel:"noopener noreferrer"},K=n("a",{href:"#footnote-ref4",class:"footnote-backref"},"↩︎",-1);function E(V,A){const o=i("RouterLink"),a=i("ExternalLinkIcon");return c(),d("div",null,[u,n("ul",null,[g,k,n("li",null,[t("absolute：将元素"),f,t("，在"),s(o,{to:"/code/frontend/css_containing_block.html"},{default:p(()=>[m]),_:1}),t("内使用 "),v,t(", "),h,t(", "),b,t(", "),x,t(" 属性进行放置。")]),y]),n("div",q,[_,n("p",null,[t("注意："),w,t("不一定就是直接的父容器！详情请查阅"),s(o,{to:"/code/frontend/css_containing_block.html"},{default:p(()=>[t("文档")]),_:1}),t("。")])]),S,n("p",null,[t("这里的flex实际上是三个属性合体的简写:flex-grow、flex-shrink和flex-basis。 关于这三个属性的详细介绍，可以参考规范"),n("a",z,[t("原文"),s(a)]),t("。不过， 规范还是建议大家使用flex这个简写属性，也就是我们这里用的这个，明白吗?")]),C,n("section",F,[n("ol",I,[n("li",L,[n("p",null,[n("a",N,[t("position - CSS | MDN"),s(a)]),t(),P])]),n("li",R,[n("p",null,[n("a",W,[t("Flexbox 基础知识_allway2的博客-CSDN博客"),s(a)]),t(),j])]),n("li",D,[n("p",null,[n("a",U,[t("弹性盒子 - 学习 Web 开发 | MDN"),s(a)]),t(),B])]),n("li",H,[n("p",null,[n("a",M,[t("网格 - 学习 Web 开发 | MDN"),s(a)]),t(),K])])])])])}const T=l(r,[["render",E],["__file","css.html.vue"]]);export{T as default};
