import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-8cf4862e.js";const p={},e=t(`<h2 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list" aria-hidden="true">#</a> 列表 list</h2><h3 id="列表方法" tabindex="-1"><a class="header-anchor" href="#列表方法" aria-hidden="true">#</a> 列表方法</h3><ul><li>list.append(obj)</li><li>list.count(obj)</li><li>list.extend(seq)</li><li>list.index(obj)</li><li>list.insert(index, obj)</li><li>list.pop([index=-1])</li><li>list.remove(obj)</li><li>list.reverse()</li><li>list.sort(cmp=None, key=None, reverse=False)</li></ul><h3 id="列表脚本操作符" tabindex="-1"><a class="header-anchor" href="#列表脚本操作符" aria-hidden="true">#</a> 列表脚本操作符</h3><table><thead><tr><th>Python 表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len([1, 2, 3])</td><td>3</td><td>长度</td></tr><tr><td>[1, 2, 3] + [4, 5, 6]</td><td>[1, 2, 3, 4, 5, 6]</td><td>组合</td></tr><tr><td>[&#39;Hi!&#39;] * 4</td><td>[&#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;]</td><td>重复</td></tr><tr><td>3 in [1, 2, 3]</td><td>True</td><td>元素是否存在于列表中</td></tr><tr><td>for x in [1, 2, 3]: print x,</td><td>1 2 3</td><td>迭代</td></tr></tbody></table><h3 id="列表截取" tabindex="-1"><a class="header-anchor" href="#列表截取" aria-hidden="true">#</a> 列表截取</h3><table><thead><tr><th>Python 表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>L[2]</td><td>&#39;Taobao&#39;</td><td>读取列表中第三个元素</td></tr><tr><td>L[-2]</td><td>&#39;Runoob&#39;</td><td>读取列表中倒数第二个元素</td></tr><tr><td>L[1:]</td><td>[&#39;Runoob&#39;, &#39;Taobao&#39;]</td><td>从第二个元素开始截取列表</td></tr></tbody></table><h2 id="双向队列-deque" tabindex="-1"><a class="header-anchor" href="#双向队列-deque" aria-hidden="true">#</a> 双向队列 deque</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">collections</span><span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">[</span>iterable<span class="token punctuation">[</span><span class="token punctuation">,</span> maxlen<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>若当作一个<strong>单向队列</strong>，append(x) 与 popleft() 才是一对。。。</p><ul><li>若当作一个<strong>栈</strong>，append(x)与 pop()就是一对</li></ul></div><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><ul><li>append(x) 添加到右侧</li><li>appendleft(x) 添加到左侧</li><li>pop() 从右侧出队</li><li>popleft() 从左侧出队</li><li>clear()</li><li>copy()</li><li>count(x)</li><li>extend(iter)</li><li>extendleft(iter)</li><li>index(x[, start[, stop]])</li><li>insert(i, x)</li><li>remove(x) 删除从左到右的第一个 x</li><li>reverse()</li><li>rotate(n=1)</li><li>maxlen</li></ul><h3 id="recipes" tabindex="-1"><a class="header-anchor" href="#recipes" aria-hidden="true">#</a> Recipes</h3><h4 id="_1-用于实现-tail-程序" tabindex="-1"><a class="header-anchor" href="#_1-用于实现-tail-程序" aria-hidden="true">#</a> 1. 用于实现 tail 程序</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">tail</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">&#39;Return the last n lines of a file&#39;</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">return</span> deque<span class="token punctuation">(</span>f<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 maxlen=n，可以实现保留文本最后 n 行的功能。</p><h4 id="_2-用于维持一个定长的近期添加元素序列" tabindex="-1"><a class="header-anchor" href="#_2-用于维持一个定长的近期添加元素序列" aria-hidden="true">#</a> 2. 用于维持一个定长的近期添加元素序列</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">moving_average</span><span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># moving_average([40, 30, 50, 46, 39, 44]) --&gt; 40.0 42.0 45.0 43.0</span>
    <span class="token comment"># http://en.wikipedia.org/wiki/Moving_average</span>
    it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span>
    d <span class="token operator">=</span> deque<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>it<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    d<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    s <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
    <span class="token keyword">for</span> elem <span class="token keyword">in</span> it<span class="token punctuation">:</span>
        s <span class="token operator">+=</span> elem <span class="token operator">-</span> d<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
        d<span class="token punctuation">.</span>append<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>
        <span class="token keyword">yield</span> s <span class="token operator">/</span> n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-实现一个-round-robin-scheduler" tabindex="-1"><a class="header-anchor" href="#_3-实现一个-round-robin-scheduler" aria-hidden="true">#</a> 3. 实现一个 round-robin scheduler</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">roundrobin</span><span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">&quot;roundrobin(&#39;ABC&#39;, &#39;D&#39;, &#39;EF&#39;) --&gt; A D E B F C&quot;</span>
    iterators <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">,</span> iterables<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> iterators<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                <span class="token keyword">yield</span> <span class="token builtin">next</span><span class="token punctuation">(</span>iterators<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                iterators<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>
            <span class="token comment"># Remove an exhausted iterator.</span>
            iterators<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-删除第-n-个元素" tabindex="-1"><a class="header-anchor" href="#_4-删除第-n-个元素" aria-hidden="true">#</a> 4. 删除第 n 个元素</h4><p>可以使用 rotate(n)来轻松删除第 n 个元素</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">delete_nth</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    d<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token punctuation">)</span>
    d<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
    d<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最小堆-heapq" tabindex="-1"><a class="header-anchor" href="#最小堆-heapq" aria-hidden="true">#</a> 最小堆 heapq</h2><p><strong>函 数</strong>                                                        <strong>描 述</strong></p><p>heappush(heap, x)                                将 x 压入堆中</p><p>heappop(heap)                                      从堆中弹出最小的元素</p><p>heapify(heap)                                         让列表具备堆特征</p><p>heapreplace(heap, x)                            弹出最小的元素，并将 x 压入堆中</p><p>nlargest(n, iter, key=None)                                      返回 iter 中 n 个最大的元素</p><p>nsmallest(n, iter, key=None)                                   返回 iter 中 n 个最小的元素</p><p>merge(*iters, key=None, reverse=False) 合并多个有序列表形成单独一个有序列表</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> heapq <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> random <span class="token keyword">import</span> shuffle
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shuffle<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> data<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> heap
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> heap
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python-如何实现最大堆" tabindex="-1"><a class="header-anchor" href="#python-如何实现最大堆" aria-hidden="true">#</a> <strong>python 如何实现最大堆？</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 最简单的方案就是，给你的堆的元素加一个值，使值逆序排列。以下是示例代码。</span>
<span class="token keyword">import</span> heapq
sss <span class="token operator">=</span> <span class="token string">&#39;abecgfidhjk&#39;</span>
ll <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>sss<span class="token punctuation">)</span>
heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>ll<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>
<span class="token comment"># [&#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;c&#39;, &#39;g&#39;, &#39;f&#39;, &#39;i&#39;, &#39;d&#39;, &#39;h&#39;, &#39;j&#39;, &#39;k&#39;]</span>
<span class="token comment"># 此时若想得到大顶堆</span>
newl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">,</span> ll<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">#print(newl)</span>
heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>newl<span class="token punctuation">)</span>
<span class="token comment"># 此时已经按照第一个值变成了小顶堆，即变成了逆序</span>
max_heap <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> newl<span class="token punctuation">:</span>
    _<span class="token punctuation">,</span> s <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>newl<span class="token punctuation">)</span>
    max_heap<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计数器-counter" tabindex="-1"><a class="header-anchor" href="#计数器-counter" aria-hidden="true">#</a> 计数器 Counter</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">collections</span><span class="token punctuation">.</span>Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>iterable<span class="token operator">-</span><span class="token keyword">or</span><span class="token operator">-</span>mapping<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Counter 是一个 dict 的子类，存着每个元素出现的次数，若访问不存在的元素会返回 0。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment"># a new, empty counter</span>
c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token string">&#39;gallahad&#39;</span><span class="token punctuation">)</span>                 <span class="token comment"># a new counter from an iterable</span>
c <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment"># a new counter from a mapping</span>
c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>cats<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> dogs<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>             <span class="token comment"># a new counter from keyword args</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接以字典的方式去访问 Counter</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>c<span class="token punctuation">[</span><span class="token string">&#39;cats&#39;</span><span class="token punctuation">]</span>         <span class="token comment"># return 4</span>
c<span class="token punctuation">[</span><span class="token string">&#39;cats&#39;</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># add one more cat</span>
c<span class="token punctuation">[</span><span class="token string">&#39;pigs&#39;</span><span class="token punctuation">]</span>         <span class="token comment"># missing value will return 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>elements()</strong> 返回一个 iterator 根据每个元素的数量来访问所有元素（会忽略数量为 0 或负的元素）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elements<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>*<strong>*most_common**</strong>([<em>n</em>]) 返回一个 tuple 列表，包含按元素数量排序的最常见的元素列表</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Counter<span class="token punctuation">(</span><span class="token string">&#39;abracadabra&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>*<strong>*subtract**</strong>([<em>iterable-or-mapping</em>]) 两个 Counter 可以相减</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c
Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>*<strong>*fromkeys**</strong>(<em>iterable</em>) 没有对 Counter 实现该方法（dict 的类方法，用于根据 dict 的键生成一个新的 dict）</p><p>*<strong>*update**</strong>([<em>iterable-or-mapping</em>]) 与 dict 的 update 一样</p><p>其他的一些操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">sum</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment"># total of all counts</span>
c<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment"># reset all counts</span>
<span class="token builtin">list</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>                         <span class="token comment"># list unique elements</span>
<span class="token builtin">set</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>                          <span class="token comment"># convert to a set</span>
<span class="token builtin">dict</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>                         <span class="token comment"># convert to a regular dictionary</span>
c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment"># convert to a list of (elem, cnt) pairs</span>
Counter<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>list_of_pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># convert from a list of (elem, cnt) pairs</span>
c<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>       <span class="token comment"># n least common elements</span>
<span class="token operator">+</span>c                              <span class="token comment"># remove zero and negative counts</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">+</span> d                       <span class="token comment"># add two counters together:  c[x] + d[x]</span>
Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">-</span> d                       <span class="token comment"># subtract (keeping only positive counts)</span>
Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">&amp;</span> d                       <span class="token comment"># intersection:  min(c[x], d[x])</span>
Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">|</span> d                       <span class="token comment"># union:  max(c[x], d[x])</span>
Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Counter<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">+</span>c
Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">-</span>c
Counter<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="随机队列-randomizedqueue" tabindex="-1"><a class="header-anchor" href="#随机队列-randomizedqueue" aria-hidden="true">#</a> 随机队列 RandomizedQueue</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>自创数据结构，在工作中使用</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">RandomizedQueue</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> _iter<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">*</span>_iter<span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> idx <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        r <span class="token operator">=</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 将最后一个元素移动到删除的元素位置</span>
        self<span class="token punctuation">.</span>arr<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> r
    <span class="token keyword">def</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">popRandom</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        idx <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>入队：O(1)</li><li>获取随机元素：O(1)</li><li>随机出队：O(1)</li><li>删除指定位置的元素：O(1)</li></ul>`,55),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","python-data-structures.html.vue"]]);export{k as default};
