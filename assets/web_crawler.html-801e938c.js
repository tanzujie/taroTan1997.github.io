import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as p,a as n,b as s,e,w as u,d as t}from"./app-8cc94dc5.js";const c={},d={href:"https://github.com/donnemartin/system-design-primer",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/xitu/gold-miner",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/XatMassacrE",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/L9m",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/Airmacho",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/xiaoyusilen",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/jifaxu",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/sqrthree",target:"_blank",rel:"noopener noreferrer"},f=n("h1",{id:"设计一个网页爬虫",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#设计一个网页爬虫","aria-hidden":"true"},"#"),s(" 设计一个网页爬虫")],-1),v={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"},A=t('<h2 id="第一步-简述用例与约束条件" tabindex="-1"><a class="header-anchor" href="#第一步-简述用例与约束条件" aria-hidden="true">#</a> 第一步：简述用例与约束条件</h2><blockquote><p>把所有需要的东西聚集在一起，审视问题。不停的提问，以至于我们可以明确使用场景和约束。讨论假设。</p></blockquote><p>我们将在没有面试官明确说明问题的情况下，自己定义一些用例以及限制条件。</p><h3 id="用例" tabindex="-1"><a class="header-anchor" href="#用例" aria-hidden="true">#</a> 用例</h3><h4 id="我们把问题限定在仅处理以下用例的范围中" tabindex="-1"><a class="header-anchor" href="#我们把问题限定在仅处理以下用例的范围中" aria-hidden="true">#</a> 我们把问题限定在仅处理以下用例的范围中</h4><ul><li><strong>服务</strong> 抓取一系列链接： <ul><li>生成包含搜索词的网页倒排索引</li><li>生成页面的标题和摘要信息 <ul><li>页面标题和摘要都是静态的，它们不会根据搜索词改变</li></ul></li></ul></li><li><strong>用户</strong> 输入搜索词后，可以看到相关的搜索结果列表，列表每一项都包含由网页爬虫生成的页面标题及摘要 <ul><li>只给该用例绘制出概要组件和交互说明，无需讨论细节</li></ul></li><li><strong>服务</strong> 具有高可用性</li></ul><h4 id="无需考虑" tabindex="-1"><a class="header-anchor" href="#无需考虑" aria-hidden="true">#</a> 无需考虑</h4><ul><li>搜索分析</li><li>个性化搜索结果</li><li>页面排名</li></ul><h3 id="限制条件与假设" tabindex="-1"><a class="header-anchor" href="#限制条件与假设" aria-hidden="true">#</a> 限制条件与假设</h3><h4 id="提出假设" tabindex="-1"><a class="header-anchor" href="#提出假设" aria-hidden="true">#</a> 提出假设</h4><ul><li>搜索流量分布不均 <ul><li>有些搜索词非常热门，有些则非常冷门</li></ul></li><li>只支持匿名用户</li><li>用户很快就能看到搜索结果</li><li>网页爬虫不应该陷入死循环 <ul><li>当爬虫路径包含环的时候，将会陷入死循环</li></ul></li><li>抓取 10 亿个链接 <ul><li>要定期重新抓取页面以确保新鲜度</li><li>平均每周重新抓取一次，网站越热门，那么重新抓取的频率越高 <ul><li>每月抓取 40 亿个链接</li></ul></li><li>每个页面的平均存储大小：500 KB <ul><li>简单起见，重新抓取的页面算作新页面</li></ul></li></ul></li><li>每月搜索量 1000 亿次</li></ul>',11),B={href:"http://lucene.apache.org/solr/",target:"_blank",rel:"noopener noreferrer"},q={href:"http://nutch.apache.org/",target:"_blank",rel:"noopener noreferrer"},y=t('<h4 id="计算用量" tabindex="-1"><a class="header-anchor" href="#计算用量" aria-hidden="true">#</a> 计算用量</h4><p><strong>如果你需要进行粗略的用量计算，请向你的面试官说明。</strong></p><ul><li>每月存储 2 PB 页面 <ul><li>每月抓取 40 亿个页面，每个页面 500 KB</li><li>三年存储 72 PB 页面</li></ul></li><li>每秒 1600 次写请求</li><li>每秒 40000 次搜索请求</li></ul><p>简便换算指南：</p><ul><li>一个月有 250 万秒</li><li>每秒 1 个请求，即每月 250 万个请求</li><li>每秒 40 个请求，即每月 1 亿个请求</li><li>每秒 400 个请求，即每月 10 亿个请求</li></ul><h2 id="第二步-概要设计" tabindex="-1"><a class="header-anchor" href="#第二步-概要设计" aria-hidden="true">#</a> 第二步： 概要设计</h2><blockquote><p>列出所有重要组件以规划概要设计。</p></blockquote><figure><img src="http://i.imgur.com/xjdAAUv.png" alt="Imgur" tabindex="0" loading="lazy"><figcaption>Imgur</figcaption></figure><h2 id="第三步-设计核心组件" tabindex="-1"><a class="header-anchor" href="#第三步-设计核心组件" aria-hidden="true">#</a> 第三步：设计核心组件</h2><blockquote><p>对每一个核心组件进行详细深入的分析。</p></blockquote><h3 id="用例-爬虫服务抓取一系列网页" tabindex="-1"><a class="header-anchor" href="#用例-爬虫服务抓取一系列网页" aria-hidden="true">#</a> 用例：爬虫服务抓取一系列网页</h3>',11),D=n("code",null,"links_to_crawl",-1),w={href:"https://www.yahoo.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"http://www.dmoz.org/",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,[s("我们将用表 "),n("code",null,"crawled_links"),s(" （已抓取链接 ）来记录已经处理过的链接以及相应的页面签名。")],-1),M=n("code",null,"links_to_crawl",-1),z=n("code",null,"crawled_links",-1),H=n("strong",null,"NoSQL 数据库",-1),F=n("code",null,"crawled_links",-1),C={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%BF%98%E6%98%AF-nosql",target:"_blank",rel:"noopener noreferrer"},L=n("strong",null,"爬虫服务",-1),N=n("strong",null,"NoSQL 数据库",-1),P=n("code",null,"crawled_links",-1),Q=n("li",null,[s("若存在，则降低该页面链接的优先级 "),n("ul",null,[n("li",null,"这样做可以避免陷入死循环"),n("li",null,"继续（进入下一次循环）")])],-1),I=n("strong",null,"倒排索引服务",-1),T={href:"https://en.wikipedia.org/wiki/Search_engine_indexing",target:"_blank",rel:"noopener noreferrer"},W=t("<li>在<strong>文档服务</strong>任务队列中，新增一个生成静态标题和摘要的任务。</li><li>生成页面签名</li><li>在 <strong>NoSQL 数据库</strong>的 <code>links_to_crawl</code> 中删除该链接</li><li>在 <strong>NoSQL 数据库</strong>的 <code>crawled_links</code> 中插入该链接以及页面签名</li>",4),j=t(`<p><strong>向面试官了解你需要写多少代码</strong>。</p><p><code>PagesDataStore</code> 是<strong>爬虫服务</strong>中的一个抽象类，它使用 <strong>NoSQL 数据库</strong>进行存储。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PagesDataStore</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> db<span class="token punctuation">)</span><span class="token punctuation">;</span>
        self<span class="token punctuation">.</span>db <span class="token operator">=</span> db
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">add_link_to_crawl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;将指定链接加入 \`links_to_crawl\`。&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">remove_link_to_crawl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;从 \`links_to_crawl\` 中删除指定链接。&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">reduce_priority_link_to_crawl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;在 \`links_to_crawl\` 中降低一个链接的优先级以避免死循环。&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">extract_max_priority_page</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;返回 \`links_to_crawl\` 中优先级最高的链接。&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">insert_crawled_link</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;将指定链接加入 \`crawled_links\`。&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">crawled_similar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;判断待抓取页面的签名是否与某个已抓取页面的签名相似。&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Page</code> 是<strong>爬虫服务</strong>的一个抽象类，它封装了网页对象，由页面链接、页面内容、子链接和页面签名构成。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> contents<span class="token punctuation">,</span> child_urls<span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>url <span class="token operator">=</span> url
        self<span class="token punctuation">.</span>contents <span class="token operator">=</span> contents
        self<span class="token punctuation">.</span>child_urls <span class="token operator">=</span> child_urls
        self<span class="token punctuation">.</span>signature <span class="token operator">=</span> signature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Crawler</code> 是<strong>爬虫服务</strong>的主类，由<code>Page</code> 和 <code>PagesDataStore</code> 组成。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Crawler</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_store<span class="token punctuation">,</span> reverse_index_queue<span class="token punctuation">,</span> doc_index_queue<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data_store <span class="token operator">=</span> data_store
        self<span class="token punctuation">.</span>reverse_index_queue <span class="token operator">=</span> reverse_index_queue
        self<span class="token punctuation">.</span>doc_index_queue <span class="token operator">=</span> doc_index_queue

    <span class="token keyword">def</span> <span class="token function">create_signature</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;基于页面链接与内容生成签名。&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">crawl_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> url <span class="token keyword">in</span> page<span class="token punctuation">.</span>child_urls<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>data_store<span class="token punctuation">.</span>add_link_to_crawl<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        page<span class="token punctuation">.</span>signature <span class="token operator">=</span> self<span class="token punctuation">.</span>create_signature<span class="token punctuation">(</span>page<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>data_store<span class="token punctuation">.</span>remove_link_to_crawl<span class="token punctuation">(</span>page<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>data_store<span class="token punctuation">.</span>insert_crawled_link<span class="token punctuation">(</span>page<span class="token punctuation">.</span>url<span class="token punctuation">,</span> page<span class="token punctuation">.</span>signature<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">crawl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            page <span class="token operator">=</span> self<span class="token punctuation">.</span>data_store<span class="token punctuation">.</span>extract_max_priority_page<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> page <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>data_store<span class="token punctuation">.</span>crawled_similar<span class="token punctuation">(</span>page<span class="token punctuation">.</span>signature<span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>data_store<span class="token punctuation">.</span>reduce_priority_link_to_crawl<span class="token punctuation">(</span>page<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>crawl_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理重复内容" tabindex="-1"><a class="header-anchor" href="#处理重复内容" aria-hidden="true">#</a> 处理重复内容</h3><p>我们要谨防网页爬虫陷入死循环，这通常会发生在爬虫路径中存在环的情况。</p><p><strong>向面试官了解你需要写多少代码</strong>.</p><p>删除重复链接：</p><ul><li>假设数据量较小，我们可以用类似于 <code>sort | unique</code> 的方法。（译注： 先排序，后去重）</li><li>假设有 10 亿条数据，我们应该使用 <strong>MapReduce</strong> 来输出只出现 1 次的记录。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">RemoveDuplicateUrls</span><span class="token punctuation">(</span>MRJob<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">mapper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> _<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> line<span class="token punctuation">,</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">reducer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>
        total <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
        <span class="token keyword">if</span> total <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> key<span class="token punctuation">,</span> total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),V={href:"https://en.wikipedia.org/wiki/Jaccard_index",target:"_blank",rel:"noopener noreferrer"},J={href:"https://en.wikipedia.org/wiki/Cosine_similarity",target:"_blank",rel:"noopener noreferrer"},U=t('<h3 id="抓取结果更新策略" tabindex="-1"><a class="header-anchor" href="#抓取结果更新策略" aria-hidden="true">#</a> 抓取结果更新策略</h3><p>要定期重新抓取页面以确保新鲜度。抓取结果应该有个 <code>timestamp</code> 字段记录上一次页面抓取时间。每隔一段时间，比如说 1 周，所有页面都需要更新一次。对于热门网站或是内容频繁更新的网站，爬虫抓取间隔可以缩短。</p><p>尽管我们不会深入网页数据分析的细节，我们仍然要做一些数据挖掘工作来确定一个页面的平均更新时间，并且根据相关的统计数据来决定爬虫的重新抓取频率。</p><p>当然我们也应该根据站长提供的 <code>Robots.txt</code> 来控制爬虫的抓取频率。</p><h3 id="用例-用户输入搜索词后-可以看到相关的搜索结果列表-列表每一项都包含由网页爬虫生成的页面标题及摘要" tabindex="-1"><a class="header-anchor" href="#用例-用户输入搜索词后-可以看到相关的搜索结果列表-列表每一项都包含由网页爬虫生成的页面标题及摘要" aria-hidden="true">#</a> 用例：用户输入搜索词后，可以看到相关的搜索结果列表，列表每一项都包含由网页爬虫生成的页面标题及摘要</h3>',5),K=n("strong",null,"客户端",-1),X={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},O=n("strong",null,"Web 服务器",-1),Y=t("<li><strong>Web 服务器</strong> 发送请求到 <strong>Query API</strong> 服务器</li><li><strong>查询 API</strong> 服务将会做这些事情： <ul><li>解析查询参数 <ul><li>删除 HTML 标记</li><li>将文本分割成词组 （译注： 分词处理）</li><li>修正错别字</li><li>规范化大小写</li><li>将搜索词转换为布尔运算</li></ul></li><li>使用<strong>倒排索引服务</strong>来查找匹配查询的文档 <ul><li><strong>倒排索引服务</strong>对匹配到的结果进行排名，然后返回最符合的结果</li></ul></li><li>使用<strong>文档服务</strong>返回文章标题与摘要</li></ul></li>",2),Z={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest",target:"_blank",rel:"noopener noreferrer"},$=n("strong",null,"REST API",-1),G=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ curl https://search.com/api/v1/search?query=hello+world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>响应内容:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
    &quot;title&quot;: &quot;foo&#39;s title&quot;,
    &quot;snippet&quot;: &quot;foo&#39;s snippet&quot;,
    &quot;link&quot;: &quot;https://foo.com&quot;,
},
{
    &quot;title&quot;: &quot;bar&#39;s title&quot;,
    &quot;snippet&quot;: &quot;bar&#39;s snippet&quot;,
    &quot;link&quot;: &quot;https://bar.com&quot;,
},
{
    &quot;title&quot;: &quot;baz&#39;s title&quot;,
    &quot;snippet&quot;: &quot;baz&#39;s snippet&quot;,
    &quot;link&quot;: &quot;https://baz.com&quot;,
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),nn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc",target:"_blank",rel:"noopener noreferrer"},sn=n("h2",{id:"第四步-架构扩展",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第四步-架构扩展","aria-hidden":"true"},"#"),s(" 第四步：架构扩展")],-1),en=n("blockquote",null,[n("p",null,"根据限制条件，找到并解决瓶颈。")],-1),an=n("figure",null,[n("img",{src:"http://i.imgur.com/bWxPtQA.png",alt:"Imgur",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Imgur")],-1),tn=n("p",null,[n("strong",null,"重要提示：不要直接从最初设计跳到最终设计！")],-1),on=n("strong",null,"基准测试、负载测试",-1),ln=n("strong",null,"分析、描述",-1),rn=n("p",null,[s("讨论初始设计可能遇到的瓶颈及相关解决方案是很重要的。例如加上一套配备多台 "),n("strong",null,"Web 服务器"),s("的"),n("strong",null,"负载均衡器"),s("是否能够解决问题？"),n("strong",null,"CDN"),s("呢？"),n("strong",null,"主从复制"),s("呢？它们各自的替代方案和需要"),n("strong",null,"权衡"),s("的利弊又有哪些呢？")],-1),pn=n("p",null,"我们将会介绍一些组件来完成设计，并解决架构规模扩张问题。内置的负载均衡器将不做讨论以节省篇幅。",-1),un=n("strong",null,"为了避免重复讨论",-1),cn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E5%B1%82",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#nosql",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%AF%E7%94%A8%E6%80%A7%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},vn=t('<p>有些搜索词非常热门，有些则非常冷门。热门的搜索词可以通过诸如 Redis 或者 Memcached 之类的<strong>内存缓存</strong>来缩短响应时间，避免<strong>倒排索引服务</strong>以及<strong>文档服务</strong>过载。<strong>内存缓存</strong>同样适用于流量分布不均匀以及流量短时高峰问题。从内存中读取 1 MB 连续数据大约需要 250 微秒，而从 SSD 读取同样大小的数据要花费 4 倍的时间，从机械硬盘读取需要花费 80 倍以上的时间。<sup><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#每个程序员都应该知道的延迟数">1</a></sup></p><p>以下是优化<strong>爬虫服务</strong>的其他建议：</p>',2),An=n("li",null,[s("为了处理数据大小问题以及网络请求负载，"),n("strong",null,"倒排索引服务"),s("和"),n("strong",null,"文档服务"),s("可能需要大量应用数据分片和数据复制。")],-1),Bn=n("li",null,[s("DNS 查询可能会成为瓶颈，"),n("strong",null,"爬虫服务"),s("最好专门维护一套定期更新的 DNS 查询服务。")],-1),qn={href:"https://en.wikipedia.org/wiki/Connection_pool",target:"_blank",rel:"noopener noreferrer"},yn=n("strong",null,"爬虫服务",-1),Dn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp",target:"_blank",rel:"noopener noreferrer"},wn=n("li",null,"网络爬虫受带宽影响较大，请确保带宽足够维持高吞吐量。",-1),xn=n("h2",{id:"其它要点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其它要点","aria-hidden":"true"},"#"),s(" 其它要点")],-1),Rn=n("blockquote",null,[n("p",null,"是否深入这些额外的主题，取决于你的问题范围和剩下的时间。")],-1),Mn=n("h3",{id:"sql-扩展模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sql-扩展模式","aria-hidden":"true"},"#"),s(" SQL 扩展模式")],-1),zn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%81%94%E5%90%88",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%86%E7%89%87",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%9D%9E%E8%A7%84%E8%8C%83%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%B0%83%E4%BC%98",target:"_blank",rel:"noopener noreferrer"},Ln=n("h4",{id:"nosql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nosql","aria-hidden":"true"},"#"),s(" NoSQL")],-1),Nn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%97%E5%9E%8B%E5%AD%98%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},In={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%BF%98%E6%98%AF-nosql",target:"_blank",rel:"noopener noreferrer"},Wn=n("h3",{id:"缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#缓存","aria-hidden":"true"},"#"),s(" 缓存")],-1),jn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#cdn-%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Kn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},On={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%9B%B4%E5%86%99%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%9E%E5%86%99%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%B7%E6%96%B0",target:"_blank",rel:"noopener noreferrer"},ns=n("h3",{id:"异步与微服务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异步与微服务","aria-hidden":"true"},"#"),s(" 异步与微服务")],-1),ss={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},es={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},as={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%83%8C%E5%8E%8B",target:"_blank",rel:"noopener noreferrer"},ts={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BE%AE%E6%9C%8D%E5%8A%A1",target:"_blank",rel:"noopener noreferrer"},os=n("h3",{id:"通信",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通信","aria-hidden":"true"},"#"),s(" 通信")],-1),ls={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc",target:"_blank",rel:"noopener noreferrer"},is={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},ps=n("h3",{id:"安全性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安全性","aria-hidden":"true"},"#"),s(" 安全性")],-1),us={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%89%E5%85%A8",target:"_blank",rel:"noopener noreferrer"},cs=n("h3",{id:"延迟数值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#延迟数值","aria-hidden":"true"},"#"),s(" 延迟数值")],-1),ds={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},hs=n("h3",{id:"持续探讨",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#持续探讨","aria-hidden":"true"},"#"),s(" 持续探讨")],-1),ms=n("ul",null,[n("li",null,"持续进行基准测试并监控你的系统，以解决他们提出的瓶颈问题。"),n("li",null,"架构扩展是一个迭代的过程。")],-1);function _s(bs,ks){const a=o("ExternalLinkIcon"),l=o("RouterLink");return i(),p("div",null,[n("blockquote",null,[n("ul",null,[n("li",null,[s("原文地址："),n("a",d,[s("github.com/donnemartin/system-design-primer"),e(a)])]),n("li",null,[s("译文出自："),n("a",h,[s("掘金翻译计划"),e(a)])]),n("li",null,[s("译者："),n("a",m,[s("XatMassacrE"),e(a)]),s("、"),n("a",_,[s("L9m"),e(a)]),s("、"),n("a",b,[s("Airmacho"),e(a)]),s("、"),n("a",k,[s("xiaoyusilen"),e(a)]),s("、"),n("a",E,[s("jifaxu"),e(a)]),s("、"),n("a",g,[s("根号三"),e(a)])])])]),f,n("p",null,[n("strong",null,[s("注意：这个文档中的链接会直接指向"),n("a",v,[s("系统设计主题索引"),e(a)]),s("中的有关部分，以避免重复的内容。你可以参考链接的相关内容，来了解其总的要点、方案的权衡取舍以及可选的替代方案。")])]),A,n("p",null,[s("用更传统的系统来练习 —— 不要使用 "),n("a",B,[s("solr"),e(a)]),s(" 、"),n("a",q,[s("nutch"),e(a)]),s(" 之类的现成系统。")]),y,n("p",null,[s("假设我们有一个初始列表 "),D,s("（待抓取链接），它最初基于网站整体的知名度来排序。当然如果这个假设不合理，我们可以使用 "),n("a",w,[s("Yahoo"),e(a)]),s("、"),n("a",x,[s("DMOZ"),e(a)]),s(" 等知名门户网站作为种子链接来进行扩散 。")]),R,n("p",null,[s("我们可以将 "),M,s(" 和 "),z,s(" 记录在键-值型 "),H,s("中。对于 "),F,s(" 中已排序的链接，我们可以使用 "),n("a",C,[s("Redis"),e(a)]),s(" 的有序集合来维护网页链接的排名。我们应当在 "),n("a",S,[s("选择 SQL 还是 NoSQL 的问题上，讨论有关使用场景以及利弊 "),e(a)]),s("。")]),n("ul",null,[n("li",null,[L,s("按照以下流程循环处理每一个页面链接： "),n("ul",null,[n("li",null,[s("选取排名最靠前的待抓取链接 "),n("ul",null,[n("li",null,[s("在 "),N,s("的 "),P,s(" 中，检查待抓取页面的签名是否与某个已抓取页面的签名相似 "),n("ul",null,[Q,n("li",null,[s("若不存在，则抓取该链接 "),n("ul",null,[n("li",null,[s("在"),I,s("任务队列中，新增一个生成"),n("a",T,[s("倒排索引"),e(a)]),s("任务。")]),W])])])])])])])])]),j,n("p",null,[s("比起处理重复内容，检测重复内容更为复杂。我们可以基于网页内容生成签名，然后对比两者签名的相似度。可能会用到的算法有 "),n("a",V,[s("Jaccard index"),e(a)]),s(" 以及 "),n("a",J,[s("cosine similarity"),e(a)]),s("。")]),U,n("ul",null,[n("li",null,[K,s("向运行"),n("a",X,[s("反向代理"),e(a)]),s("的 "),O,s("发送一个请求")]),Y]),n("p",null,[s("我们使用 "),n("a",Z,[$,e(a)]),s(" 与客户端通信：")]),G,n("p",null,[s("对于服务器内部通信，我们可以使用 "),n("a",nn,[s("远程过程调用协议（RPC）"),e(a)])]),sn,en,an,tn,n("p",null,[s("现在你要 1) "),on,s("。2) "),ln,s("性能瓶颈。3) 在解决瓶颈问题的同时，评估替代方案、权衡利弊。4) 重复以上步骤。请阅读"),e(l,{to:"/code/system-design/system-design-primer/scaling_aws.html"},{default:u(()=>[s("设计一个系统，并将其扩大到为数以百万计的 AWS 用户服务")]),_:1}),s(" 来了解如何逐步扩大初始设计。")]),rn,pn,n("p",null,[un,s("，请参考"),n("a",cn,[s("系统设计主题索引"),e(a)]),s("相关部分来了解其要点、方案的权衡取舍以及替代方案。")]),n("ul",null,[n("li",null,[n("a",dn,[s("DNS"),e(a)])]),n("li",null,[n("a",hn,[s("负载均衡器"),e(a)])]),n("li",null,[n("a",mn,[s("水平扩展"),e(a)])]),n("li",null,[n("a",_n,[s("Web 服务器（反向代理）"),e(a)])]),n("li",null,[n("a",bn,[s("API 服务器（应用层）"),e(a)])]),n("li",null,[n("a",kn,[s("缓存"),e(a)])]),n("li",null,[n("a",En,[s("NoSQL"),e(a)])]),n("li",null,[n("a",gn,[s("一致性模式"),e(a)])]),n("li",null,[n("a",fn,[s("可用性模式"),e(a)])])]),vn,n("ul",null,[An,Bn,n("li",null,[s("借助于"),n("a",qn,[s("连接池"),e(a)]),s("，即同时维持多个开放网络连接，可以提升"),yn,s("的性能并减少内存使用量。 "),n("ul",null,[n("li",null,[s("改用 "),n("a",Dn,[s("UDP"),e(a)]),s(" 协议同样可以提升性能")])])]),wn]),xn,Rn,Mn,n("ul",null,[n("li",null,[n("a",zn,[s("读取复制"),e(a)])]),n("li",null,[n("a",Hn,[s("联合"),e(a)])]),n("li",null,[n("a",Fn,[s("分片"),e(a)])]),n("li",null,[n("a",Cn,[s("非规范化"),e(a)])]),n("li",null,[n("a",Sn,[s("SQL 调优"),e(a)])])]),Ln,n("ul",null,[n("li",null,[n("a",Nn,[s("键-值存储"),e(a)])]),n("li",null,[n("a",Pn,[s("文档类型存储"),e(a)])]),n("li",null,[n("a",Qn,[s("列型存储"),e(a)])]),n("li",null,[n("a",In,[s("图数据库"),e(a)])]),n("li",null,[n("a",Tn,[s("SQL vs NoSQL"),e(a)])])]),Wn,n("ul",null,[n("li",null,[s("在哪缓存 "),n("ul",null,[n("li",null,[n("a",jn,[s("客户端缓存"),e(a)])]),n("li",null,[n("a",Vn,[s("CDN 缓存"),e(a)])]),n("li",null,[n("a",Jn,[s("Web 服务器缓存"),e(a)])]),n("li",null,[n("a",Un,[s("数据库缓存"),e(a)])]),n("li",null,[n("a",Kn,[s("应用缓存"),e(a)])])])]),n("li",null,[s("什么需要缓存 "),n("ul",null,[n("li",null,[n("a",Xn,[s("数据库查询级别的缓存"),e(a)])]),n("li",null,[n("a",On,[s("对象级别的缓存"),e(a)])])])]),n("li",null,[s("何时更新缓存 "),n("ul",null,[n("li",null,[n("a",Yn,[s("缓存模式"),e(a)])]),n("li",null,[n("a",Zn,[s("直写模式"),e(a)])]),n("li",null,[n("a",$n,[s("回写模式"),e(a)])]),n("li",null,[n("a",Gn,[s("刷新"),e(a)])])])])]),ns,n("ul",null,[n("li",null,[n("a",ss,[s("消息队列"),e(a)])]),n("li",null,[n("a",es,[s("任务队列"),e(a)])]),n("li",null,[n("a",as,[s("背压"),e(a)])]),n("li",null,[n("a",ts,[s("微服务"),e(a)])])]),os,n("ul",null,[n("li",null,[s("可权衡选择的方案： "),n("ul",null,[n("li",null,[s("与客户端的外部通信 - "),n("a",ls,[s("使用 REST 作为 HTTP API"),e(a)])]),n("li",null,[s("内部通信 - "),n("a",rs,[s("RPC"),e(a)])])])]),n("li",null,[n("a",is,[s("服务发现"),e(a)])])]),ps,n("p",null,[s("请参阅"),n("a",us,[s("安全"),e(a)]),s("。")]),cs,n("p",null,[s("请参阅"),n("a",ds,[s("每个程序员都应该知道的延迟数"),e(a)]),s("。")]),hs,ms])}const fs=r(c,[["render",_s],["__file","web_crawler.html.vue"]]);export{fs as default};
