import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as p,a as n,b as s,e,w as c,d as t}from"./app-8cc94dc5.js";const u={},d={href:"https://github.com/donnemartin/system-design-primer",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/xitu/gold-miner",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/XatMassacrE",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/L9m",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/Airmacho",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/xiaoyusilen",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/jifaxu",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/sqrthree",target:"_blank",rel:"noopener noreferrer"},f=n("h1",{id:"设计一个键-值缓存来存储最近-web-服务查询的结果",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#设计一个键-值缓存来存储最近-web-服务查询的结果","aria-hidden":"true"},"#"),s(" 设计一个键-值缓存来存储最近 web 服务查询的结果")],-1),v={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"},A=t('<h2 id="第一步-简述用例与约束条件" tabindex="-1"><a class="header-anchor" href="#第一步-简述用例与约束条件" aria-hidden="true">#</a> 第一步：简述用例与约束条件</h2><blockquote><p>搜集需求与问题的范围。<br> 提出问题来明确用例与约束条件。<br> 讨论假设。</p></blockquote><p>我们将在没有面试官明确说明问题的情况下，自己定义一些用例以及限制条件。</p><h3 id="用例" tabindex="-1"><a class="header-anchor" href="#用例" aria-hidden="true">#</a> 用例</h3><h4 id="我们将把问题限定在仅处理以下用例的范围中" tabindex="-1"><a class="header-anchor" href="#我们将把问题限定在仅处理以下用例的范围中" aria-hidden="true">#</a> 我们将把问题限定在仅处理以下用例的范围中</h4><ul><li><strong>用户</strong>发送一个搜索请求，命中缓存</li><li><strong>用户</strong>发送一个搜索请求，未命中缓存</li><li><strong>服务</strong>有着高可用性</li></ul><h3 id="限制条件与假设" tabindex="-1"><a class="header-anchor" href="#限制条件与假设" aria-hidden="true">#</a> 限制条件与假设</h3><h4 id="提出假设" tabindex="-1"><a class="header-anchor" href="#提出假设" aria-hidden="true">#</a> 提出假设</h4><ul><li>网络流量不是均匀分布的 <ul><li>经常被查询的内容应该一直存于缓存中</li><li>需要确定如何规定缓存过期、缓存刷新规则</li></ul></li><li>缓存提供的服务查询速度要快</li><li>机器间延迟较低</li><li>缓存有内存限制 <ul><li>需要决定缓存什么、移除什么</li><li>需要缓存百万级的查询</li></ul></li><li>1000 万用户</li><li>每个月 100 亿次查询</li></ul><h4 id="计算用量" tabindex="-1"><a class="header-anchor" href="#计算用量" aria-hidden="true">#</a> 计算用量</h4><p><strong>如果你需要进行粗略的用量计算，请向你的面试官说明。</strong></p><ul><li>缓存存储的是键值对有序表，键为 <code>query</code>（查询），值为 <code>results</code>（结果）。 <ul><li><code>query</code> - 50 字节</li><li><code>title</code> - 20 字节</li><li><code>snippet</code> - 200 字节</li><li>总计：270 字节</li></ul></li><li>假如 100 亿次查询都是不同的，且全部需要存储，那么每个月需要 2.7 TB 的缓存空间 <ul><li>单次查询 270 字节 * 每月查询 100 亿次</li><li>假设内存大小有限制，需要决定如何制定缓存过期规则</li></ul></li><li>每秒 4,000 次请求</li></ul><p>便利换算指南：</p><ul><li>每个月有 250 万秒</li><li>每秒一个请求 = 每个月 250 万次请求</li><li>每秒 40 个请求 = 每个月 1 亿次请求</li><li>每秒 400 个请求 = 每个月 10 亿次请求</li></ul><h2 id="第二步-概要设计" tabindex="-1"><a class="header-anchor" href="#第二步-概要设计" aria-hidden="true">#</a> 第二步：概要设计</h2><blockquote><p>列出所有重要组件以规划概要设计。</p></blockquote><figure><img src="http://i.imgur.com/KqZ3dSx.png" alt="Imgur" tabindex="0" loading="lazy"><figcaption>Imgur</figcaption></figure><h2 id="第三步-设计核心组件" tabindex="-1"><a class="header-anchor" href="#第三步-设计核心组件" aria-hidden="true">#</a> 第三步：设计核心组件</h2><blockquote><p>深入每个核心组件的细节。</p></blockquote><h3 id="用例-用户发送了一次请求-命中了缓存" tabindex="-1"><a class="header-anchor" href="#用例-用户发送了一次请求-命中了缓存" aria-hidden="true">#</a> 用例：用户发送了一次请求，命中了缓存</h3><p>常用的查询可以由例如 Redis 或者 Memcached 之类的<strong>内存缓存</strong>提供支持，以减少数据读取延迟，并且避免<strong>反向索引服务</strong>以及<strong>文档服务</strong>的过载。从内存读取 1 MB 连续数据大约要花 250 微秒，而从 SSD 读取同样大小的数据要花费 4 倍的时间，从机械硬盘读取需要花费 80 倍以上的时间。<sup><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#每个程序员都应该知道的延迟数">1</a></sup></p><p>由于缓存容量有限，我们将使用 LRU（近期最少使用算法）来控制缓存的过期。</p>',22),B=n("strong",null,"客户端",-1),y={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},D=n("strong",null,"Web 服务器",-1),q=t("<li>这个 <strong>Web 服务器</strong>将请求转发给<strong>查询 API</strong> 服务</li><li><strong>查询 API</strong> 服务将会做这些事情： <ul><li>分析查询 <ul><li>移除多余的内容</li><li>将文本分割成词组</li><li>修正拼写错误</li><li>规范化字母的大小写</li><li>将查询转换为布尔运算</li></ul></li><li>检测<strong>内存缓存</strong>是否有匹配查询的内容 <ul><li>如果命中<strong>内存缓存</strong>，<strong>内存缓存</strong>将会做以下事情： <ul><li>将缓存入口的位置指向 LRU 链表的头部</li><li>返回缓存内容</li></ul></li><li>否则，<strong>查询 API</strong> 将会做以下事情： <ul><li>使用<strong>反向索引服务</strong>来查找匹配查询的文档 <ul><li><strong>反向索引服务</strong>对匹配到的结果进行排名，然后返回最符合的结果</li></ul></li><li>使用<strong>文档服务</strong>返回文章标题与片段</li><li>更新<strong>内存缓存</strong>，存入内容，将<strong>内存缓存</strong>入口位置指向 LRU 链表的头部</li></ul></li></ul></li></ul></li>",2),R=t(`<h4 id="缓存的实现" tabindex="-1"><a class="header-anchor" href="#缓存的实现" aria-hidden="true">#</a> 缓存的实现</h4><p>缓存可以使用双向链表实现：新元素将会在头结点加入，过期的元素将会在尾节点被删除。我们使用哈希表以便能够快速查找每个链表节点。</p><p><strong>向你的面试官告知你准备写多少代码</strong>。</p><p>实现<strong>查询 API 服务</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">QueryApi</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> memory_cache<span class="token punctuation">,</span> reverse_index_service<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>memory_cache <span class="token operator">=</span> memory_cache
        self<span class="token punctuation">.</span>reverse_index_service <span class="token operator">=</span> reverse_index_service

    <span class="token keyword">def</span> <span class="token function">parse_query</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;移除多余内容，将文本分割成词组，修复拼写错误，
        规范化字母大小写，转换布尔运算。
        &quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">process_query</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">:</span>
        query <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_query<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
        results <span class="token operator">=</span> self<span class="token punctuation">.</span>memory_cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
        <span class="token keyword">if</span> results <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            results <span class="token operator">=</span> self<span class="token punctuation">.</span>reverse_index_service<span class="token punctuation">.</span>process_search<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>memory_cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> results<span class="token punctuation">)</span>
        <span class="token keyword">return</span> results
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现<strong>节点</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>query <span class="token operator">=</span> query
        self<span class="token punctuation">.</span>results <span class="token operator">=</span> results
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现<strong>链表</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">move_to_front</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">append_to_front</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">remove_from_tail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现<strong>缓存</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>MAX_SIZE <span class="token operator">=</span> MAX_SIZE
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>lookup <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment"># key: query, value: node</span>
        self<span class="token punctuation">.</span>linked_list <span class="token operator">=</span> LinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">)</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;从缓存取得存储的内容

        将入口节点位置更新为 LRU 链表的头部。
        &quot;&quot;&quot;</span>
        node <span class="token operator">=</span> self<span class="token punctuation">.</span>lookup<span class="token punctuation">[</span>query<span class="token punctuation">]</span>
        <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>linked_list<span class="token punctuation">.</span>move_to_front<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>results

    <span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> results<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;将所给查询键的结果存在缓存中。

        当更新缓存记录的时候，将它的位置指向 LRU 链表的头部。
        如果这个记录是新的记录，并且缓存空间已满，应该在加入新记录前
        删除最老的记录。
        &quot;&quot;&quot;</span>
        node <span class="token operator">=</span> self<span class="token punctuation">.</span>lookup<span class="token punctuation">[</span>query<span class="token punctuation">]</span>
        <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token comment"># 键存在于缓存中，更新它对应的值</span>
            node<span class="token punctuation">.</span>results <span class="token operator">=</span> results
            self<span class="token punctuation">.</span>linked_list<span class="token punctuation">.</span>move_to_front<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># 键不存在于缓存中</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>size <span class="token operator">==</span> self<span class="token punctuation">.</span>MAX_SIZE<span class="token punctuation">:</span>
                <span class="token comment"># 在链表中查找并删除最老的记录</span>
                self<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>linked_list<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>linked_list<span class="token punctuation">.</span>remove_from_tail<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token comment"># 添加新的键值对</span>
            new_node <span class="token operator">=</span> Node<span class="token punctuation">(</span>query<span class="token punctuation">,</span> results<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>linked_list<span class="token punctuation">.</span>append_to_front<span class="token punctuation">(</span>new_node<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>lookup<span class="token punctuation">[</span>query<span class="token punctuation">]</span> <span class="token operator">=</span> new_node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="何时更新缓存" tabindex="-1"><a class="header-anchor" href="#何时更新缓存" aria-hidden="true">#</a> 何时更新缓存</h4><p>缓存将会在以下几种情况更新：</p><ul><li>页面内容发生变化</li><li>页面被移除或者加入了新页面</li><li>页面的权值发生变动</li></ul><p>解决这些问题的最直接的方法，就是为缓存记录设置一个它在被更新前能留在缓存中的最长时间，这个时间简称为存活时间（TTL）。</p>`,15),M={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%BD%95%E6%97%B6%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},H=n("h2",{id:"第四步-架构扩展",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第四步-架构扩展","aria-hidden":"true"},"#"),s(" 第四步：架构扩展")],-1),x=n("blockquote",null,[n("p",null,"根据限制条件，找到并解决瓶颈。")],-1),w=n("figure",null,[n("img",{src:"http://i.imgur.com/4j99mhe.png",alt:"Imgur",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Imgur")],-1),C=n("p",null,[n("strong",null,"重要提示：不要从最初设计直接跳到最终设计中！")],-1),F=n("strong",null,"基准测试、负载测试",-1),L=n("strong",null,"分析、描述",-1),N=n("p",null,[s("讨论初始设计可能遇到的瓶颈及相关解决方案是很重要的。例如加上一个配置多台 "),n("strong",null,"Web 服务器"),s("的"),n("strong",null,"负载均衡器"),s("是否能够解决问题？"),n("strong",null,"CDN"),s("呢？"),n("strong",null,"主从复制"),s("呢？它们各自的替代方案和需要"),n("strong",null,"权衡"),s("的利弊又有什么呢？")],-1),I=n("p",null,"我们将会介绍一些组件来完成设计，并解决架构扩张问题。内置的负载均衡器将不做讨论以节省篇幅。",-1),S=n("strong",null,"为了避免重复讨论",-1),P={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E5%B1%82",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%AF%E7%94%A8%E6%80%A7%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},K=n("h3",{id:"将内存缓存扩大到多台机器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#将内存缓存扩大到多台机器","aria-hidden":"true"},"#"),s(" 将内存缓存扩大到多台机器")],-1),G=n("p",null,[s("为了解决庞大的请求负载以及巨大的内存需求，我们将要对架构进行水平拓展。如何在我们的"),n("strong",null,"内存缓存"),s("集群中存储数据呢？我们有以下三个主要可选方案：")],-1),J=n("li",null,[n("strong",null,"缓存集群中的每一台机器都有自己的缓存"),s(" - 简单，但是它会降低缓存命中率。")],-1),O=n("li",null,[n("strong",null,"缓存集群中的每一台机器都有缓存的拷贝"),s(" - 简单，但是它的内存使用效率太低了。")],-1),Y={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%86%E7%89%87",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"machine = hash(query)",-1),nn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%AD%A3%E5%9C%A8%E5%AE%8C%E5%96%84%E4%B8%AD",target:"_blank",rel:"noopener noreferrer"},sn=n("h2",{id:"其它要点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其它要点","aria-hidden":"true"},"#"),s(" 其它要点")],-1),en=n("blockquote",null,[n("p",null,"是否深入这些额外的主题，取决于你的问题范围和剩下的时间。")],-1),an=n("h3",{id:"sql-缩放模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sql-缩放模式","aria-hidden":"true"},"#"),s(" SQL 缩放模式")],-1),tn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6",target:"_blank",rel:"noopener noreferrer"},on={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%81%94%E5%90%88",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%86%E7%89%87",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%9D%9E%E8%A7%84%E8%8C%83%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%B0%83%E4%BC%98",target:"_blank",rel:"noopener noreferrer"},cn=n("h4",{id:"nosql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nosql","aria-hidden":"true"},"#"),s(" NoSQL")],-1),un={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%97%E5%9E%8B%E5%AD%98%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%BF%98%E6%98%AF-nosql",target:"_blank",rel:"noopener noreferrer"},kn=n("h3",{id:"缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#缓存","aria-hidden":"true"},"#"),s(" 缓存")],-1),En={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#cdn-%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},An={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%9B%B4%E5%86%99%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%9E%E5%86%99%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%B7%E6%96%B0",target:"_blank",rel:"noopener noreferrer"},Mn=n("h3",{id:"异步与微服务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异步与微服务","aria-hidden":"true"},"#"),s(" 异步与微服务")],-1),zn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%83%8C%E5%8E%8B",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BE%AE%E6%9C%8D%E5%8A%A1",target:"_blank",rel:"noopener noreferrer"},Cn=n("h3",{id:"通信",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通信","aria-hidden":"true"},"#"),s(" 通信")],-1),Fn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},In=n("h3",{id:"安全性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安全性","aria-hidden":"true"},"#"),s(" 安全性")],-1),Sn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%89%E5%85%A8",target:"_blank",rel:"noopener noreferrer"},Pn=n("h3",{id:"延迟数值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#延迟数值","aria-hidden":"true"},"#"),s(" 延迟数值")],-1),jn={href:"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},Tn=n("h3",{id:"持续探讨",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#持续探讨","aria-hidden":"true"},"#"),s(" 持续探讨")],-1),Qn=n("ul",null,[n("li",null,"持续进行基准测试并监控你的系统，以解决他们提出的瓶颈问题。"),n("li",null,"架构拓展是一个迭代的过程。")],-1);function Xn(Un,Wn){const a=o("ExternalLinkIcon"),l=o("RouterLink");return i(),p("div",null,[n("blockquote",null,[n("ul",null,[n("li",null,[s("原文地址："),n("a",d,[s("github.com/donnemartin/system-design-primer"),e(a)])]),n("li",null,[s("译文出自："),n("a",h,[s("掘金翻译计划"),e(a)])]),n("li",null,[s("译者："),n("a",m,[s("XatMassacrE"),e(a)]),s("、"),n("a",b,[s("L9m"),e(a)]),s("、"),n("a",k,[s("Airmacho"),e(a)]),s("、"),n("a",E,[s("xiaoyusilen"),e(a)]),s("、"),n("a",_,[s("jifaxu"),e(a)]),s("、"),n("a",g,[s("根号三"),e(a)])])])]),f,n("p",null,[n("strong",null,[s("注意：这个文档中的链接会直接指向"),n("a",v,[s("系统设计主题索引"),e(a)]),s("中的有关部分，以避免重复的内容。你可以参考链接的相关内容，来了解其总的要点、方案的权衡取舍以及可选的替代方案。")])]),A,n("ul",null,[n("li",null,[B,s("向运行"),n("a",y,[s("反向代理"),e(a)]),s("的 "),D,s("发送一个请求")]),q]),R,n("p",null,[s("参考 "),n("a",M,[s("「何时更新缓存」"),e(a)]),s("来了解其权衡取舍及替代方案。以上方法在"),n("a",z,[s("缓存模式"),e(a)]),s("一章中详细地进行了描述。")]),H,x,w,C,n("p",null,[s("现在你要 1) "),F,s("。2) "),L,s("性能瓶颈。3) 在解决瓶颈问题的同时，评估替代方案、权衡利弊。4) 重复以上步骤。请阅读"),e(l,{to:"/code/system-design/system-design-primer/scaling_aws.html"},{default:c(()=>[s("「设计一个系统，并将其扩大到为数以百万计的 AWS 用户服务」")]),_:1}),s(" 来了解如何逐步扩大初始设计。")]),N,I,n("p",null,[S,s("，请参考"),n("a",P,[s("系统设计主题索引"),e(a)]),s("相关部分来了解其要点、方案的权衡取舍以及可选的替代方案。")]),n("ul",null,[n("li",null,[n("a",j,[s("DNS"),e(a)])]),n("li",null,[n("a",T,[s("负载均衡器"),e(a)])]),n("li",null,[n("a",Q,[s("水平拓展"),e(a)])]),n("li",null,[n("a",X,[s("反向代理（web 服务器）"),e(a)])]),n("li",null,[n("a",U,[s("API 服务（应用层）"),e(a)])]),n("li",null,[n("a",W,[s("缓存"),e(a)])]),n("li",null,[n("a",Z,[s("一致性模式"),e(a)])]),n("li",null,[n("a",V,[s("可用性模式"),e(a)])])]),K,G,n("ul",null,[J,O,n("li",null,[n("strong",null,[s("对缓存进行"),n("a",Y,[s("分片"),e(a)]),s("，分别部署在缓存集群中的所有机器中")]),s(" - 更加复杂，但是它是最佳的选择。我们可以使用哈希，用查询语句 "),$,s(" 来确定哪台机器有需要缓存。当然我们也可以使用"),n("a",nn,[s("一致性哈希"),e(a)]),s("。")])]),sn,en,an,n("ul",null,[n("li",null,[n("a",tn,[s("读取复制"),e(a)])]),n("li",null,[n("a",on,[s("联合"),e(a)])]),n("li",null,[n("a",ln,[s("分片"),e(a)])]),n("li",null,[n("a",rn,[s("非规范化"),e(a)])]),n("li",null,[n("a",pn,[s("SQL 调优"),e(a)])])]),cn,n("ul",null,[n("li",null,[n("a",un,[s("键-值存储"),e(a)])]),n("li",null,[n("a",dn,[s("文档类型存储"),e(a)])]),n("li",null,[n("a",hn,[s("列型存储"),e(a)])]),n("li",null,[n("a",mn,[s("图数据库"),e(a)])]),n("li",null,[n("a",bn,[s("SQL vs NoSQL"),e(a)])])]),kn,n("ul",null,[n("li",null,[s("在哪缓存 "),n("ul",null,[n("li",null,[n("a",En,[s("客户端缓存"),e(a)])]),n("li",null,[n("a",_n,[s("CDN 缓存"),e(a)])]),n("li",null,[n("a",gn,[s("Web 服务器缓存"),e(a)])]),n("li",null,[n("a",fn,[s("数据库缓存"),e(a)])]),n("li",null,[n("a",vn,[s("应用缓存"),e(a)])])])]),n("li",null,[s("什么需要缓存 "),n("ul",null,[n("li",null,[n("a",An,[s("数据库查询级别的缓存"),e(a)])]),n("li",null,[n("a",Bn,[s("对象级别的缓存"),e(a)])])])]),n("li",null,[s("何时更新缓存 "),n("ul",null,[n("li",null,[n("a",yn,[s("缓存模式"),e(a)])]),n("li",null,[n("a",Dn,[s("直写模式"),e(a)])]),n("li",null,[n("a",qn,[s("回写模式"),e(a)])]),n("li",null,[n("a",Rn,[s("刷新"),e(a)])])])])]),Mn,n("ul",null,[n("li",null,[n("a",zn,[s("消息队列"),e(a)])]),n("li",null,[n("a",Hn,[s("任务队列"),e(a)])]),n("li",null,[n("a",xn,[s("背压"),e(a)])]),n("li",null,[n("a",wn,[s("微服务"),e(a)])])]),Cn,n("ul",null,[n("li",null,[s("可权衡选择的方案： "),n("ul",null,[n("li",null,[s("与客户端的外部通信 - "),n("a",Fn,[s("使用 REST 作为 HTTP API"),e(a)])]),n("li",null,[s("服务器内部通信 - "),n("a",Ln,[s("RPC"),e(a)])])])]),n("li",null,[n("a",Nn,[s("服务发现"),e(a)])])]),In,n("p",null,[s("请参阅"),n("a",Sn,[s("「安全」"),e(a)]),s("一章。")]),Pn,n("p",null,[s("请参阅"),n("a",jn,[s("「每个程序员都应该知道的延迟数」"),e(a)]),s("。")]),Tn,Qn])}const Kn=r(u,[["render",Xn],["__file","query_cache.html.vue"]]);export{Kn as default};
