const n=JSON.parse(`{"key":"v-2e67d314","path":"/code/language/python/python-concurrent.html","title":"Python并发编程","lang":"zh-CN","frontmatter":{"title":"Python并发编程","order":29,"category":["笔记","API"],"tag":["Python","并发"],"description":"多进程程序例子 import argparse import redis from tqdm import tqdm from multiprocessing import Pool, Process parser = argparse.ArgumentParser(description='PyTorch MM Training') parser.add_argument('--port', default=6379, type=str, help=\\"port id\\") parser.add_argument('--file', default=None, type=str, help=\\"paths for train instances\\") args = parser.parse_args() host = '127.0.0.1' port = args.port # r = redis.Redis(host=host, port=port) train_file = args.file def worker_i(train_file, i, nums=16): r = redis.Redis(host=host, port=port) k = 0 if i == 0: iter_ = tqdm(open(train_file, 'r')) else: iter_ = open(train_file, 'r') for info in iter_: if k % nums == i: # 将多个任务分成nums份 r.set(k, info.strip()) k += 1 process_list = [] nums = 8 for i in range(nums): p = Process(target=worker_i, args=(train_file, i, nums)) p.start() process_list.append(p) for i in process_list: p.join() print('写入完成')","head":[["meta",{"property":"og:url","content":"https://newzone.top/code/language/python/python-concurrent.html"}],["meta",{"property":"og:site_name","content":"zxy"}],["meta",{"property":"og:title","content":"Python并发编程"}],["meta",{"property":"og:description","content":"多进程程序例子 import argparse import redis from tqdm import tqdm from multiprocessing import Pool, Process parser = argparse.ArgumentParser(description='PyTorch MM Training') parser.add_argument('--port', default=6379, type=str, help=\\"port id\\") parser.add_argument('--file', default=None, type=str, help=\\"paths for train instances\\") args = parser.parse_args() host = '127.0.0.1' port = args.port # r = redis.Redis(host=host, port=port) train_file = args.file def worker_i(train_file, i, nums=16): r = redis.Redis(host=host, port=port) k = 0 if i == 0: iter_ = tqdm(open(train_file, 'r')) else: iter_ = open(train_file, 'r') for info in iter_: if k % nums == i: # 将多个任务分成nums份 r.set(k, info.strip()) k += 1 process_list = [] nums = 8 for i in range(nums): p = Process(target=worker_i, args=(train_file, i, nums)) p.start() process_list.append(p) for i in process_list: p.join() print('写入完成')"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-14T09:07:38.000Z"}],["meta",{"property":"article:author","content":"孤悲"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:modified_time","content":"2023-08-14T09:07:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python并发编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-14T09:07:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孤悲\\",\\"url\\":\\"https://zxy.wsn640.top\\"}]}"]]},"headers":[{"level":2,"title":"多进程程序例子","slug":"多进程程序例子","link":"#多进程程序例子","children":[]},{"level":2,"title":"Python 中的三种并发编程方式","slug":"python-中的三种并发编程方式","link":"#python-中的三种并发编程方式","children":[{"level":3,"title":"三种方式：多线程（Thread）、多进程（Process）、协程（Coroutine）","slug":"三种方式-多线程-thread-、多进程-process-、协程-coroutine","link":"#三种方式-多线程-thread-、多进程-process-、协程-coroutine","children":[]},{"level":3,"title":"什么是 CPU 密集型计算、IO 密集型计算","slug":"什么是-cpu-密集型计算、io-密集型计算","link":"#什么是-cpu-密集型计算、io-密集型计算","children":[]},{"level":3,"title":"多线程、多进程、协程的对比","slug":"多线程、多进程、协程的对比","link":"#多线程、多进程、协程的对比","children":[]},{"level":3,"title":"怎样根据任务选择对应技术","slug":"怎样根据任务选择对应技术","link":"#怎样根据任务选择对应技术","children":[]}]},{"level":2,"title":"全局解释器锁 GIL（Global Interpreter Lock）","slug":"全局解释器锁-gil-global-interpreter-lock","link":"#全局解释器锁-gil-global-interpreter-lock","children":[]},{"level":2,"title":"Python 多线程代码","slug":"python-多线程代码","link":"#python-多线程代码","children":[{"level":3,"title":"直接创建线程","slug":"直接创建线程","link":"#直接创建线程","children":[]},{"level":3,"title":"使用线程池ThreadPoolExecutor","slug":"使用线程池threadpoolexecutor","link":"#使用线程池threadpoolexecutor","children":[]}]},{"level":2,"title":"Python 多进程代码","slug":"python-多进程代码","link":"#python-多进程代码","children":[{"level":3,"title":"多进程优雅退出","slug":"多进程优雅退出","link":"#多进程优雅退出","children":[]}]},{"level":2,"title":"线程池原理","slug":"线程池原理","link":"#线程池原理","children":[{"level":3,"title":"线程池的原理","slug":"线程池的原理","link":"#线程池的原理","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]}]},{"level":2,"title":"协程的原理以及代码","slug":"协程的原理以及代码","link":"#协程的原理以及代码","children":[{"level":3,"title":"协程的原理","slug":"协程的原理","link":"#协程的原理","children":[]},{"level":3,"title":"协程的使用以及异步 IO","slug":"协程的使用以及异步-io","link":"#协程的使用以及异步-io","children":[]},{"level":3,"title":"协程并发度的控制","slug":"协程并发度的控制","link":"#协程并发度的控制","children":[]}]},{"level":2,"title":"信号量 Semaphore","slug":"信号量-semaphore","link":"#信号量-semaphore","children":[]}],"git":{"createdTime":1692004058000,"updatedTime":1692004058000,"contributors":[{"name":"taroTan1997","email":"tanzujie1997@stu.scau.edu.cn","commits":1}]},"readingTime":{"minutes":6.56,"words":1967},"filePathRelative":"code/language/python/python-concurrent.md","localizedDate":"2023年8月14日","excerpt":"<h2> 多进程程序例子</h2>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> argparse\\n<span class=\\"token keyword\\">import</span> redis\\n<span class=\\"token keyword\\">from</span> tqdm <span class=\\"token keyword\\">import</span> tqdm\\n<span class=\\"token keyword\\">from</span> multiprocessing <span class=\\"token keyword\\">import</span> Pool<span class=\\"token punctuation\\">,</span> Process\\n\\nparser <span class=\\"token operator\\">=</span> argparse<span class=\\"token punctuation\\">.</span>ArgumentParser<span class=\\"token punctuation\\">(</span>description<span class=\\"token operator\\">=</span><span class=\\"token string\\">'PyTorch MM Training'</span><span class=\\"token punctuation\\">)</span>\\nparser<span class=\\"token punctuation\\">.</span>add_argument<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'--port'</span><span class=\\"token punctuation\\">,</span> default<span class=\\"token operator\\">=</span><span class=\\"token number\\">6379</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">type</span><span class=\\"token operator\\">=</span><span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">help</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"port id\\"</span><span class=\\"token punctuation\\">)</span>\\nparser<span class=\\"token punctuation\\">.</span>add_argument<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'--file'</span><span class=\\"token punctuation\\">,</span> default<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">type</span><span class=\\"token operator\\">=</span><span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">help</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"paths for train instances\\"</span><span class=\\"token punctuation\\">)</span>\\nargs <span class=\\"token operator\\">=</span> parser<span class=\\"token punctuation\\">.</span>parse_args<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\nhost <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'127.0.0.1'</span>\\nport <span class=\\"token operator\\">=</span> args<span class=\\"token punctuation\\">.</span>port\\n\\n<span class=\\"token comment\\"># r = redis.Redis(host=host, port=port)</span>\\n\\ntrain_file <span class=\\"token operator\\">=</span> args<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">file</span>\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">worker_i</span><span class=\\"token punctuation\\">(</span>train_file<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> nums<span class=\\"token operator\\">=</span><span class=\\"token number\\">16</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    r <span class=\\"token operator\\">=</span> redis<span class=\\"token punctuation\\">.</span>Redis<span class=\\"token punctuation\\">(</span>host<span class=\\"token operator\\">=</span>host<span class=\\"token punctuation\\">,</span> port<span class=\\"token operator\\">=</span>port<span class=\\"token punctuation\\">)</span>\\n    k <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n\\n    <span class=\\"token keyword\\">if</span> i <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n        iter_ <span class=\\"token operator\\">=</span> tqdm<span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>train_file<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'r'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n        iter_ <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>train_file<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'r'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">for</span> info <span class=\\"token keyword\\">in</span> iter_<span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">if</span> k <span class=\\"token operator\\">%</span> nums <span class=\\"token operator\\">==</span> i<span class=\\"token punctuation\\">:</span> <span class=\\"token comment\\"># 将多个任务分成nums份</span>\\n            r<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">set</span><span class=\\"token punctuation\\">(</span>k<span class=\\"token punctuation\\">,</span> info<span class=\\"token punctuation\\">.</span>strip<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        k <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\nprocess_list <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n\\nnums <span class=\\"token operator\\">=</span> <span class=\\"token number\\">8</span>\\n<span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    p <span class=\\"token operator\\">=</span> Process<span class=\\"token punctuation\\">(</span>target<span class=\\"token operator\\">=</span>worker_i<span class=\\"token punctuation\\">,</span> args<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>train_file<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> nums<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    p<span class=\\"token punctuation\\">.</span>start<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    process_list<span class=\\"token punctuation\\">.</span>append<span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> process_list<span class=\\"token punctuation\\">:</span>\\n    p<span class=\\"token punctuation\\">.</span>join<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'写入完成'</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
